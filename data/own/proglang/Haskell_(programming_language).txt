Haskell (programming language) - Wikipedia, the free encyclopedia 
 
 
 
 
 
 
 
 
 
 
 
 
 
 





 
 
		 
		 
		 
			 
			 
						 
						 Haskell (programming language) 
			 
								 From Wikipedia, the free encyclopedia 
								 
												 
					Jump to:					 navigation , 					 search 
				 
				 
 Haskell 
 
  
 
 
 Paradigm(s) 
 functional , lazy/ non-strict , modular 
 
 
 Appeared in 
 1990 ; 24&#160;years ago &#160;( 1990 ) 
 
 
 Designed by 
 Simon Peyton Jones , Lennart Augustsson , Dave Barton, Brian Boutel, Warren Burton , Joseph Fasel, Kevin Hammond , Ralf Hinze, Paul Hudak , John Hughes , Thomas Johnsson, Mark Jones , John Launchbury, Erik Meijer , John Peterson , Alastair Reid , Colin Runciman, Philip Wadler 
 
 
 Stable release 
 Haskell 2010  (July&#160;2010 ; 3&#160;years ago &#160;( 2010-07 ) ) 
 
 
 Preview release 
 Announced as Haskell 2014  
 
 
 Typing discipline 
 static , strong , inferred 
 
 
 Major implementations 
 GHC , Hugs , NHC, JHC, Yhc , UHC 
 
 
 Dialects 
 Helium , Gofer 
 
 
 Influenced by 
 Clean ,  
 
 
 Influenced 
 Agda ,  
 
 
 OS 
 Cross-platform 
 
 
 Website 
 haskell.org 
 
 
 Haskell  /  ˈ  h  æ  s  k  əl  /   As a functional programming language, the primary control construct is the function . 
 
 
 
 Contents 
 
 
 1 History 
 
 1.1 Haskell 1.0 to 1.4 
 1.2 Haskell 98 
 1.3 Haskell Prime 
 1.4 Haskell 2010 
 
 
 2 Features 
 3 Code examples 
 4 Implementations 
 5 Applications 
 6 Related languages 
 7 Criticism 
 8 Conferences and workshops 
 9 References 
 10 Further reading 
 11 External links 
 
 
 
 History  
 Following the release of Miranda by Research Software Ltd, in 1985, interest in lazy functional languages grew: by 1987, more than a dozen non-strict , purely functional programming languages existed. Of these, Miranda was the most widely used, but was proprietary software . At the conference on Functional Programming Languages and Computer Architecture (FPCA '87) in Portland, Oregon , a meeting was held during which participants formed a strong consensus that a committee should be formed to define an open standard for such languages. The committee's purpose was to consolidate the existing functional languages into a common one that would serve as a basis for future research in functional-language design.  
 Haskell 1.0 to 1.4  
 The first version of Haskell ("Haskell 1.0") was defined in 1990.  The committee's efforts resulted in a series of language definitions (1.0, 1.1, 1.2, 1.3, 1.4). 
 Haskell 98  
 In late 1997, the series culminated in Haskell 98 , intended to specify a stable, minimal, portable version of the language and an accompanying standard library for teaching, and as a base for future extensions. The committee expressly welcomed the creation of extensions and variants of Haskell 98 via adding and incorporating experimental features.  
 In February 1999, the Haskell 98 language standard was originally published as "The Haskell 98 Report".  
 Haskell Prime  
 In early 2006, the process of defining a successor to the Haskell 98 standard, informally named Haskell Prime , began.  and published in July 2010. 
 Haskell 2010  
 Haskell 2010 adds the Foreign Function Interface (FFI) to Haskell, allowing for bindings to other programming languages, fixes some syntax issues (changes in the formal grammar) and bans so-called "n-plus-k-patterns", that is, definitions of the form fact (n+1) = (n+1) * fact n are no longer allowed. It introduces the Language-Pragma-Syntax-Extension which allows for designating a Haskell source as Haskell 2010 or requiring certain Extensions to the Haskell Language. The names of the extensions introduced in Haskell 2010 are DoAndIfThenElse, HierarchicalModules, EmptyDataDeclarations, FixityResolution, ForeignFunctionInterface, LineCommentSyntax, PatternGuards, RelaxedDependencyAnalysis, LanguagePragma, NoNPlusKPatterns.  
 Features  
 Main article: Haskell features 
 See also: Glasgow Haskell Compiler#Extensions to Haskell 
 Haskell features lazy evaluation , pattern matching , list comprehension , type classes , and type polymorphism . It is a purely functional language, which means that in general, functions in Haskell do not have side effects . There is a distinct construct for representing side effects, orthogonal to the type of functions. A pure function may return a side effect which is subsequently executed, modeling the impure functions of other languages. 
 Haskell has a strong , static type system based on Hindley–Milner type inference . Haskell's principal innovation in this area is to add type classes, which were originally conceived as a principled way to add overloading to the language,  
 The construct which represents side effects is an example of a monad . Monads are a general framework which can model different kinds of computation, including error handling, nondeterminism , parsing , and software transactional memory . Monads are defined as ordinary datatypes, but Haskell provides some syntactic sugar for their use. 
 The language has an open, published specification,  and multiple implementations exist . 
 There is an active community around the language, and more than 5400 third-party open-source libraries and tools are available in the online package repository Hackage.  
 The main implementation of Haskell, GHC , is both an interpreter and native-code compiler that runs on most platforms. GHC is noted for its high-performance implementation of concurrency and parallelism ,  and for having a rich type system incorporating recent innovations such as generalized algebraic data types and type families. 
 Code examples  
 See also: Haskell 98 features#Examples 
 The following is a Hello world program written in Haskell (note that all but the last line can be omitted): 
 
 
 
 module Main where 
 
main :: IO ( ) 
main = putStrLn "Hello, World!" 
 
 
 Here is the factorial function in Haskell, defined in a few different ways: 
 
 
 
 -- Type annotation (optional) 
factorial :: Integer -&gt; Integer 
 
 -- Using recursion 
factorial 0 = 1 
factorial n | n &gt; 0 = n * factorial ( n - 1 ) 
 
 -- Using recursion but written without pattern matching 
factorial n = if n &gt; 0 then n * factorial ( n - 1 ) else 1 
 
 -- Using a list 
factorial n = product  
 
 -- Using fold (implements product) 
factorial n = foldl1 ( * )  
 
 -- Point-free style 
factorial = foldr ( * ) 1 . enumFromTo 1 
 
 -- Point-free style analytic solution 
 import Math . Gamma
factorial = round . exp . lnGamma . fromIntegral . ( + 1 ) 
 
 
 An efficient implementation of the Fibonacci numbers , as an infinite list , is this: 
 
 
 
 -- Type annotation (optional) 
fib :: Int -&gt; Integer 
 
 -- With self-referencing data 
fib n = fibs !! n
   where fibs = 0 : scanl ( + ) 1 fibs
   -- 0,1,1,2,3,5,... 
 
 -- Same, coded directly 
fib n = fibs !! n
   where fibs = 0 : 1 : next fibs
    next ( a : t @ ( b: _ ) ) = ( a + b ) : next t
 
 -- Similar idea, using zipWith 
fib n = fibs !! n
   where fibs = 0 : 1 : zipWith ( + ) fibs ( tail fibs ) 
 
 -- Using a generator function 
fib n = fibs ( 0 , 1 ) !! n
   where fibs ( a , b ) = a : fibs ( b , a + b ) 
 
 
 The Int type refers to a machine-sized integer (used as a list subscript with the&#160;!! operator), while Integer is an arbitrary-precision integer. For example, the above code quickly computes "fib 10000" as a 2090-digit number. 
 This is an implementation of the quick sort algorithm over lists, in which the first element is taken as the pivot: 
 
 
 
quickSort :: Ord a =&gt;  
quickSort  
quickSort ( x:xs ) = quickSort  ++ -- Sort the left part of the list 
      ++        -- Insert pivot between two sorted parts 
     quickSort   -- Sort the right part of the list 
 
 
 Implementations  
 All listed implementations are distributed under open source licenses. There are currently no proprietary Haskell implementations.  
 The following implementations comply fully, or very nearly, with the Haskell 98 standard. 
 
 The Glasgow Haskell Compiler (GHC) compiles to native code on a number of different architectures—as well as to ANSI C —using C-- as an intermediate language . GHC has become the de facto standard Haskell dialect.  There are libraries (e.g. bindings to OpenGL ) that will work only with GHC. GHC is also distributed along with the Haskell platform . 
 The Utrecht Haskell Compiler (UHC) is a Haskell implementation from Utrecht University . UHC supports almost all Haskell 98 features plus many experimental extensions. It is implemented using attribute grammars and is currently mainly used for research into generated type systems and language extensions. 
 Jhc is a Haskell compiler written by John Meacham emphasising speed and efficiency of generated programs as well as exploration of new program transformations. 
 Ajhc is a fork of Jhc. 
 LHC is a whole-program optimizing backend for GHC . It is based on Urban Boquist’s compiler intermediate language, GRIN.  Older versions of LHC were based on Jhc rather than GHC. 
 
 The following implementations are no longer being actively maintained: 
 
 Hugs , the Haskell User's Gofer System , is a bytecode interpreter. It used to be one of the most widely used implementations alongside the GHC compiler,  but has now been mostly replaced by GHCi. It also comes with a graphics library. 
 nhc98 is another bytecode compiler. Nhc98 focuses on minimizing memory usage. 
 Yhc , the York Haskell Compiler was a fork of nhc98, with the goals of being simpler, more portable and more efficient, and integrating support for Hat, the Haskell tracer. It also featured a JavaScript backend allowing users to run Haskell programs in a web browser. 
 HBC is an early implementation supporting Haskell 1.4. It was implemented by Lennart Augustsson in, and based on, Lazy ML . It has not been actively developed for some time. 
 
 Implementations below are not fully Haskell 98 compliant, and use a language that is a variant of Haskell: 
 
 Gofer was an educational dialect of Haskell, with a feature called "constructor classes", developed by Mark Jones. It was supplanted by Hugs (see above). 
 Helium is a newer dialect of Haskell. The focus is on making it easy to learn by providing clearer error messages. It currently lacks full support for type classes, rendering it incompatible with many Haskell programs. 
 
 Applications  
 Audrey Tang 's Pugs is an implementation for the long-forthcoming Perl 6 language with an interpreter and compilers that proved useful after just a few months of its writing; similarly, GHC is often a testbed for advanced functional programming features and optimizations. Darcs is a revision control system written in Haskell, with several innovative features. Linspire GNU/Linux chose Haskell for system tools development.  
 Bluespec SystemVerilog (BSV) is a language for semiconductor design that is an extension of Haskell. Additionally, Bluespec, Inc. 's tools are implemented in Haskell. Cryptol , a language and toolchain for developing and verifying cryptographic algorithms, is implemented in Haskell. Notably, the first formally verified microkernel , seL4 was verified using Haskell. 
 There are Haskell web frameworks ,  such as: 
 
 Yesod 
 Happstack 
 Snap  
 
 Related languages  
 Clean is a close relative of Haskell. Its biggest deviation from Haskell is in the use of uniqueness types instead of monads for I/O and side-effects. 
 A series of languages inspired by Haskell, but with different type systems, have been developed, including: 
 
 Agda , a functional language with dependent types 
 Idris , a general purpose functional language with dependent types 
 Epigram , a functional language with dependent types suitable for proving properties of programs 
 Cayenne 
 Ωmega 
 
 JVM -based: 
 
 Frege , a Haskell-like language with Java's scalar types and good Java integration.  
 Jaskell, a functional scripting programming language that runs in Java VM.  
 
 Other related languages include: 
 
 Curry , a functional/logic programming language based on Haskell 
 
 Haskell has served as a testbed for many new ideas in language design. There have been a wide number of Haskell variants produced, exploring new language ideas, including: 
 
 Parallel Haskell:
 
 From Glasgow University , supports clusters of machines or single multiprocessors.  
 From MIT  
 
 
 Distributed Haskell (formerly Goffin) and Eden.  
 Eager Haskell, based on speculative evaluation . 
 Several object-oriented versions: Haskell++, and Mondrian. 
 Generic Haskell , a version of Haskell with type system support for generic programming . 
 O'Haskell, an extension of Haskell adding object-orientation and concurrent programming support which "has reportedly been superseded by Timber ."  
 Disciple , a strict-by-default (laziness available by annotation) dialect of Haskell which supports destructive update, computational effects, type directed field projections and allied functional goodness. 
 Scotch, a kind of hybrid of Haskell and Python  
 Hume , a strict functional programming language for embedded systems based on processes as stateless automata over a sort of tuples of single element mailbox channels where the state is kept by feedback into the mailboxes, and a mapping description from outputs to channels as box wiring, with a Haskell-like expression language and syntax. 
 
 Criticism  
 Jan-Willem Maessen, in 2002, and Simon Peyton Jones , in 2003, discussed problems associated with lazy evaluation while also acknowledging the theoretical motivation for it,  They note that, in addition to adding some performance overhead, lazy evaluation makes it more difficult for programmers to reason about the performance of their code (particularly its space usage). 
 Bastiaan Heeren, Daan Leijen, and Arjan van IJzendoorn in 2003 also observed some stumbling blocks for Haskell learners: "The subtle syntax and sophisticated type system of Haskell are a double edged sword — highly appreciated by experienced programmers but also a source of frustration among beginners, since the generality of Haskell often leads to cryptic error messages."  To address these, researchers from Utrecht University developed an advanced interpreter called Helium which improved the user-friendliness of error messages by limiting the generality of some Haskell features, and in particular removing support for type classes . 
 Ben Lippmeier designed Disciple  He argues (p.&#160;20) that "destructive update furnishes the programmer with two important and powerful tools... a set of efficient array-like data structures for managing collections of objects, and ... the ability to broadcast a new value to all parts of a program with minimal burden on the programmer." 
 Robert Harper , one of the authors of Standard ML , has given his reasons for not using Haskell to teach introductory programming. Among these are the difficulty of reasoning about resource usage with non-strict evaluation, that lazy evaluation complicates the definition of data types and inductive reasoning,  
 Conferences and workshops  
 The Haskell community meets regularly for research and development activities. The primary events are: 
 
 The Haskell Symposium (formerly the Haskell Workshop) 
 The Haskell Implementors Workshop 
 The International Conference on Functional Programming 
 
 Since 2006, there have been a series of organized "hackathons", the Hac series, aimed at improving the programming language tools and libraries.  
 Since 2005, a growing number of Haskell users' groups have formed, in the United States, Canada, Australia, South America, Europe and Asia. 
 References  
 
 
 ^  a   b   c  Marlow, Simon (24 November 2009). "Announcing Haskell 2010" . Haskell mailing list . http://www.haskell.org/pipermail/haskell/2009-November/021750.html . Retrieved 12 March 2011 . 
 ^  Lynagh, Ian (1 May 2013). "Haskell 2014" . Haskell-prime mailing list . http://www.haskell.org/pipermail/haskell-prime/2013-May/003825.html . Retrieved 9 October 2013 . 
 ^  a   b   c   d   e   f   g   h   i   j   k   l   m  Peyton Jones 2003 , p.&#160;xi 
 ^  Norell, Ulf (2008). "Dependently Typed Programming in Agda" . Gothenburg: Chalmers University . Retrieved 9 February 2012 . &#160; 
 ^  Hudak et al. 2007 , p.&#160;12-38,43. 
 ^  Stroustrup, Bjarne ; Sutton, Andrew (2011). Design of Concept Libraries for C++ . &#160; 
 ^  a   b   c   d   e   f   g   h   i   j  Hudak et al. 2007 , pp.&#160;12-45–46. 
 ^  a   b   Meijer, Erik . "Confessions of a Used Programming Language Salesman: Getting the Masses Hooked on Haskell" . OOPSLA 2007 . &#160; 
 ^  Meijer, Erik (1 October 2009). "C9 Lectures: Dr. Erik Meijer – Functional Programming Fundamentals, Chapter 1 of 13" . Channel 9 . Microsoft . Retrieved 9 February 2012 . &#160; 
 ^  Drobi, Sadek (4 March 2009). "Erik Meijer on LINQ" . InfoQ (QCon SF 2008: C4Media Inc.) . Retrieved 9 February 2012 . &#160; 
 ^  Hickey, Rich. "Clojure Bookshelf" . Listmania! . Amazon.com . Retrieved 9 February 2012 . &#160; 
 ^  Heller, Martin (18 October 2011). "Turn up your nose at Dart and smell the CoffeeScript" . JavaWorld (InfoWorld) . Retrieved 9 February 2012 . &#160; 
 ^  Syme, Don ; Granicz, Adam; Cisternino, Antonio (2007). Expert F# . Apress . p.&#160;2. "F# also draws from Haskell particularly with regard to two advanced language features called sequence expressions and workflows ." &#160; 
 ^  Wechsung, Ingo. "The Frege Programmin Language" . Retrieved 26 February 2014 . &#160; 
 ^  "LiveScript Inspiration" . Retrieved 2014 02 04 . &#160; Check date values in: |accessdate= ( help ) 
 ^  "Glossary of Terms and Jargon" . Perl Foundation Perl 6 Wiki . The Perl Foundation . 28 February . Retrieved 9 February 2012 . &#160; Check date values in: |date= ( help ) 
 ^  Kuchling, A. M. "Functional Programming HOWTO" . Python v2.7.2 documentation . Python Software Foundation . Retrieved 9 February 2012 . &#160; 
 ^  Fogus, Michael (6 August 2010). "MartinOdersky take(5) toList" . Send More Paramedics . Retrieved 9 February 2012 . &#160; 
 ^  Chevalier, Tim (28 January 2008). "anybody can tell me the pronuncation of "haskell"?" . Haskell-cafe mailing list . http://www.haskell.org/pipermail/haskell-cafe/2008-January/038756.html . Retrieved 12 March 2011 . 
 ^  a   b   c  Peyton Jones 2003 . 
 ^  a   b  Hudak et al. 2007 . 
 ^  Burstall, Rod (2000). "Christopher Strachey—Understanding Programming Languages". Higher-Order and Symbolic Computation 13 (52). &#160; 
 ^  a   b   c  Peyton Jones 2003 , Preface. 
 ^  "Haskell Wiki: Implementations" . Retrieved 18 December 2012 . &#160; 
 ^  "Welcome to Haskell ' " . The Haskell' Wiki . &#160; 
 ^  Wadler, P.; Blott, S. (1989). "How to make ad-hoc polymorphism less ad hoc". Proceedings of the 16th ACM SIGPLAN - SIGACT Symposium on Principles of Programming Languages ( ACM ): 60–76. doi : 10.1145/75277.75283 . ISBN &#160; 0-89791-294-2 . &#160; 
 ^  Hallgren, T. (January 2001). "Fun with Functional Dependencies, or Types as Values in Static Computations in Haskell" . Proceedings of the Joint CS/CE Winter Meeting (Varberg, Sweden). &#160; 
 ^  "HackageDB statistics" . Hackage.haskell.org . Retrieved 2013-06-26 . &#160; 
 ^  Computer Language Benchmarks Game 
 ^  "Implementations" at the Haskell Wiki 
 ^  C. Ryder and S. Thompson (2005). "Porting HaRe to the GHC API" 
 ^  Boquist, Urban; Johnsson, Thomas (1996). "The GRIN Project: A Highly Optimising Back End for Lazy Functional Languages". LNCS 1268 : 58–84. doi : 10.1.1.27.3918 . &#160; Cite uses deprecated parameters ( help ) 
 ^  Hudak et al. 2007 , p.&#160;12-22. 
 ^  "Linspire/Freespire Core OS Team and Haskell" . Debian Haskell mailing list . May 2006. &#160; 
 ^  xmonad.org 
 ^  HaskellWiki – Haskell web frameworks 
 ^  "Snap: A Haskell Web Framework: Home" . Snapframework.com . Retrieved 2013-06-26 . &#160; 
 ^  The Frege prog. lang. 
 ^  Project Frege at google code 
 ^  Hellow World and more with Frege 
 ^  Jaskell 
 ^  Glasgow Parallel Haskell 
 ^  GHC Language Features: Parallel Haskell 
 ^  Using GHC: Using SML parallelism 
 ^  MIT Parallel Haskell 
 ^  OHaskell at HaskellWiki 
 ^  Scotch 
 ^  Jan-Willem Maessen. Eager Haskell: Resource-bounded execution yields efficient iteration . Proceedings of the 2002 ACM SIGPLAN workshop on Haskell. 
 ^  Simon Peyton Jones. Wearing the hair shirt: a retrospective on Haskell . Invited talk at POPL 2003. 
 ^  Lazy evaluation can lead to excellent performance, such as in The Computer Language Benchmarks Game  
 ^  Heeren, Bastiaan; Leijen, Daan; van IJzendoorn, Arjan (2003). "Helium, for learning Haskell" . Proceedings of the 2003 ACM SIGPLAN workshop on Haskell . &#160; 
 ^  "DDC – HaskellWiki" . Haskell.org. 2010-12-03 . Retrieved 2013-06-26 . &#160; 
 ^  Ben Lippmeier, Type Inference and Optimisation for an Impure World , Australian National University (2010) PhD thesis, chapter 1 
 ^  Robert Harper. "The point of laziness" . &#160; 
 ^  Robert Harper. "Modules matter most." . &#160; 
 ^  "Hackathon – HaskellWiki" . &#160; 
 
 
 Further reading  
 
 Reports 
 
 
 Peyton Jones, Simon , ed. (2003). Haskell 98 Language and Libraries: The Revised Report . Cambridge University Press. ISBN &#160; 0521826144 . &#160; 
 
 
 Textbooks 
 
 
 Davie, Antony (1992). An Introduction to Functional Programming Systems Using Haskell . Cambridge University Press. ISBN &#160; 0-521-25830-8 . &#160; 
 Bird, Richard (1998). Introduction to Functional Programming using Haskell (2nd ed.). Prentice Hall Press. ISBN &#160; 0-13-484346-0 . &#160; 
 Hudak, Paul (2000). The Haskell School of Expression: Learning Functional Programming through Multimedia . New York: Cambridge University Press. ISBN &#160; 0521643384 . &#160; 
 Hutton, Graham (2007). Programming in Haskell . Cambridge University Press. ISBN &#160; 0521692695 . &#160; 
 O'Sullivan, Bryan ; Stewart, Don ; Goerzen, John (2008). Real World Haskell . Sebastopol: O'Reilly. ISBN &#160; 0-596-51498-0 &#160;( full text ) &#160; 
 Thompson, Simon (2011). Haskell: The Craft of Functional Programming (3rd ed.). Addison-Wesley. ISBN &#160; 0201882957 . &#160; 
 Lipovača, Miran (April 2011). Learn You a Haskell for Great Good! . San Francisco: No Starch Press. ISBN &#160; 978-1-59327-283-8 . &#160; 
 
 
 History 
 
 
 Hudak, Paul ; Hughes, John ; Peyton Jones, Simon ; Wadler, Philip (2007). "A History of Haskell: Being Lazy with Class" . Proceedings of the third ACM SIGPLAN conference on History of programming languages ( HOPL III) : 12–1–55. doi : 10.1145/1238844.1238856 . ISBN &#160; 978-1-59593-766-7 . &#160; 
 
 External links  
 
 
 
 Wikibooks has a book on the topic of: Haskell 
 
 
 
 
 
 Wikibooks has a book on the topic of: Write Yourself a Scheme in 48 Hours 
 
 
 
 Official website 
 Language and library specification at the Haskell Wiki 
 Haskell on the Open Directory Project 
 
 
 Tutorials 
 
 
 Hudak, Paul; Peterson, John; Fasel, Joseph (June 2000). "A Gentle Introduction To Haskell, Version 98" . Haskell.org . &#160; 
 Learn you a Haskell for great good! by Miran Lipovača; assumes no knowledge 
 School of Haskell ; online tutorials and courses where the user can run and edit snippets of Haskell code in-place 
 Try Haskell! , an in-browser interactive tutorial 
 Yet Another Haskell Tutorial , by Hal Daumé III; assumes far less prior knowledge than official tutorial 
 The Haskell Cheatsheet , compact language reference and mini-tutorial 
 
 
 Books 
 
 
 Real World Haskell by Bryan O'Sullivan, Don Stewart, and John Goerzen, published by O'Reilly Media 
 
 
 Various 
 
 
 Yorgey, Brent (12 March 2009). "The Typeclassopedia" . The Monad.Reader (13): 17–68 &#160; 
 Jones, William (5 August 2009). Warp Speed Haskell . Imperial College London . &#160; 
 The Evolution of a Haskell Programmer , slightly humorous overview of different programming styles available in Haskell 
 Online Bibliography of Haskell Research 
 Haskell Weekly News 
 The Monad.Reader , quarterly magazine on Haskell topics 
 Markus (29 August 2008). "Episode 108: Simon Peyton Jones on Functional Programming and Haskell" . Software Engineering Radio (Podcast). &#160; 
 Leksah , a GTK-based Haskell IDE written in Haskell 
 Hamilton, Naomi (19 September 2008). "The A-Z of Programming Languages: Haskell" . Computerworld . &#160; 
 
 
 Applications 
 
 
 Industrial Haskell Group , collaborative development 
 Commercial Users of Functional Programming , specific projects 
 Haskell in industry , a list of companies using Haskell commercially 
 



 								 
				Retrieved from " http://en.wikipedia.org/w/index.php?title=Haskell_(programming_language)&amp;oldid=598293955 "				 
												 Categories : Haskell programming language family Academic programming languages Educational programming languages Functional languages 1990 in computer science Programming languages created in 1990 Pattern matching programming languages Literate programming Statically typed programming languages  Hidden categories: CS1 errors: dates Pages containing cite templates with deprecated parameters All articles with unsourced statements Articles with unsourced statements from February 2012 Articles with unsourced statements from April 2009 Articles with Open Directory Project links Articles with inconsistent citation formats Use dmy dates from March 2012 Articles with example Haskell code  												 
							 
		 
		 
			 Navigation menu 
			 
				 
	 Personal tools 
	 
 Create account Log in 	 
 
				 
					 
	 Namespaces 
	 
					 Article 
					 Talk 
			 
 
 
	 
		 
	 Variants 
	 
		 
					 
	 
 
				 
				 
					 
	 Views 
	 
					 Read 
					 Edit 
					 View history 
			 
 
 
	 Actions 
	 
		 
					 
	 
 
 
	 Search 
	 
					 
					 		 
	 
 
				 
			 
			 
					 
				 
	 Navigation 
	 
		 
			 Main page 
			 Contents 
			 Featured content 
			 Current events 
			 Random article 
			 Donate to Wikipedia 
			 Wikimedia Shop 
		 
	 
 
 
	 Interaction 
	 
		 
			 Help 
			 About Wikipedia 
			 Community portal 
			 Recent changes 
			 Contact page 
		 
	 
 
 
	 Tools 
	 
		 
			 What links here 
			 Related changes 
			 Upload file 
			 Special pages 
			 Permanent link 
			 Page information 
			 Data item 
 Cite this page 		 
	 
 
 
	 Print/export 
	 
		 
			 Create a book 
			 Download as PDF 
			 Printable version 
		 
	 
 
 
	 Languages 
	 
		 
			 العربية 
			 Azərbaycanca 
			 Български 
			 Català 
			 Čeština 
			 Dansk 
			 Deutsch 
			 Eesti 
			 Ελληνικά 
			 Español 
			 Esperanto 
			 فارسی 
			 Français 
			 Galego 
			 한국어 
			 Hrvatski 
			 Bahasa Indonesia 
			 Íslenska 
			 Italiano 
			 עברית 
			 Қазақша 
			 Latina 
			 Latviešu 
			 Lëtzebuergesch 
			 Magyar 
			 मराठी 
			 Bahasa Melayu 
			 Nederlands 
			 日本語 
			 Norsk bokmål 
			 Polski 
			 Português 
			 Română 
			 Русский 
			 Simple English 
			 Slovenčina 
			 Slovenščina 
			 Suomi 
			 Svenska 
			 Тоҷикӣ 
			 Türkçe 
			 Українська 
			 Tiếng Việt 
			 中文 
			 
			 Edit links 
		 
	 
 
			 
		 
		 
							 
											 This page was last modified on 5 March 2014 at 19:17. 
											 Text is available under the Creative Commons Attribution-ShareAlike License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. 
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc. , a non-profit organization. 
									 
							 
											 Privacy policy 
											 About Wikipedia 
											 Disclaimers 
											 Contact Wikipedia 
											 Developers 
											 Mobile view