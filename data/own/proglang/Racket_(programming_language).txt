Racket (programming language) - Wikipedia, the free encyclopedia 
 
 
 
 
 
 
 
 
 
 
 
 
 
 





 
 
		 
		 
		 
			 
			 
						 
						 Racket (programming language) 
			 
								 From Wikipedia, the free encyclopedia 
								 
												 
					Jump to:					 navigation , 					 search 
				 
				 
 Racket 
 
  
 
 
 
 
 
 
  
DrRacket on Ubuntu GNU/Linux 
 
 
 
 
 
 Paradigm(s) 
 Multi-paradigm : functional , procedural , modular , object-oriented , logic , reflective , meta 
 
 
 Appeared in 
 1994 
 
 
 Developer 
 PLT Inc. 
 
 
 Stable release 
 5.3.6  (August&#160;10, 2013 ; 6 months ago &#160;( 2013-08-10 ) ) 
 
 
 Typing discipline 
 Dynamic , strong , static 
 
 
 Dialects 
 Typed Racket , Lazy Racket , Scribble , FrTime , more 
 
 
 Influenced by 
 Scheme , Eiffel  
 
 
 Influenced 
 Scheme ,   Rust 
 
 
 Platform 
 x86 , PowerPC , SPARC , MIPS , ARM 
 
 
 OS 
 Cross-platform 
 
 
 License 
 LGPL 
 
 
 Website 
 racket-lang.org 
 
 
 Racket (formerly named PLT Scheme ) is a general purpose , multi-paradigm programming language in the Lisp / Scheme family. One of its design goals is to serve as a platform for language creation, design, and implementation.  The language is used in a variety of contexts such as scripting , general-purpose programming, computer science education, and research. 
 The platform provides an implementation of the Racket language (including a sophisticated run-time system ,  
 The platform distribution is free and open source software distributed under the LGPL license. Extensions and packages written by the community are uploaded to PLaneT,  a web-based package distribution system. 
 
 
 
 Contents 
 
 
 1 History 
 
 1.1 Development 
 1.2 Version history 
 1.3 Racket 
 
 
 2 Features 
 
 2.1 Macros and extensibility 
 
 
 3 Programming environment 
 
 3.1 DrRacket IDE 
 
 
 4 Code examples 
 5 Applications and practical use 
 6 References 
 7 Further reading 
 8 External links 
 
 8.1 Tutorials 
 8.2 Style guide 
 8.3 Website and documentation 
 
 
 
 
 
 History  
 Development  
 Matthias Felleisen founded PLT in the mid 1990s, first as a research group, soon after as a project dedicated to the production of pedagogic materials for novice programmers (lectures, exercises/projects, software). In January 1995, the group decided to develop a pedagogic programming environment based on Scheme . Matthew Flatt cobbled together MrEd—the original virtual machine for Racket—from libscheme,  The main development language that DrScheme supported was called PLT Scheme. 
 In parallel, the team started conducting workshops for high school teachers, training them in program design and functional programming. Field tests with these teachers and their students provided essential clues for the direction of the development. 
 Over the following years, PLT added teaching languages, an algebraic stepper,  a transparent read-eval-print loop , a constructor-based printer, and many other innovations to DrScheme, producing an application-quality pedagogic program development environment. By 2001, the core team (Felleisen, Findler, Flatt, Krishnamurthi) had also written and published their first textbook, How to Design Programs , based on their teaching philosophy. 
 Version history  
 The first generation of PLT Scheme revisions introduced features for programming in the large with both modules and classes . Version 42 introduced units — a first-class module system — to complement classes for large scale development.  The language evolved throughout a number of successive versions, and gaining milestone popularity in Version 53, leading to extensive work and the following Version 100, which would be equivalent to a "1.0" release in current popular version systems. 
 The next major revision was named Version 200, which introduced a new default module system that cooperates with macros.  Unlike units, these modules are not first-class objects . 
 Version 300 introduced Unicode support, foreign library support, and refinements to the class system.  Later on, the 300 series improved the performance of the language runtime with an addition of a JIT compiler and a switch to a default generational garbage collection . 
 By the next major release, the project had switched to a more conventional sequence-based version numbering. Version 4.0 introduced the #lang shorthand to specify the language that a module is written in. In addition, the revision introduced immutable pairs and lists, support for fine-grained parallelism , and a statically-typed dialect.  
 Racket  
 On June 7, 2010, PLT Scheme was renamed Racket.  
 Features  
 Main article: Racket features 
 Racket's core language includes macros , modules , lexical closures , tail calls , delimited continuations ,  and pattern matching . 
 In addition, the language features the first contract system for a higher-order language.  Racket's contract system is inspired by the Design by Contract work for Eiffel and extends it to work for higher-order values such as first-class functions , objects, reference cells, and so on. For example, an object that is checked by a contract can be insured to make contract checks when its methods are eventually invoked. 
 Racket's compiler is a bytecode compiler that translates to an internal bytecode format that is run by the Racket virtual machine . On x86 and PowerPC platforms, the bytecode is further compiled using a JIT compiler at runtime. 
 Since 2004, the language has also shipped with PLaneT, a package manager that is integrated into the module system so that third-party libraries can be transparently imported and used. Additionally, PLaneT has a built-in versioning policy to prevent dependency hell .  
 Macros and extensibility  
 See also: Racket language extensions 
 The feature that distinguishes Racket from other languages in the Lisp family is its integrated language extensibility . Racket's extensibility features are built into the module system to allow context-sensitive and module-level control over syntax.  Since any module can be used as a language, via the #lang notation, this effectively means a programmer can control virtually any aspect of the language. 
 The module-level extensibility features are combined with a Scheme -like hygienic macro system, which provides more features than Lisp's S-expression manipulation system,  Scheme 84's hygienic extend-syntax macros, or R5RS 's syntax-rules . Indeed, it is fair to say that the macro system is a carefully tuned application programming interface (API) for compiler extensions. Using this compiler API, programmers can add features and entire domain-specific languages in a manner that makes them completely indistinguishable from built-in language constructs. 
 The macro system in Racket has been used to construct entire language dialects . This includes Typed Racket—a statically typed dialect of Racket that eases the migration from untyped to typed code,  
 Such languages are not restricted to S-expression based syntax. In addition to conventional readtable-based syntax extensions, Racket's #lang makes it possible for a language programmer to define any arbitrary parser, for example, using the parser tools library.  See Racket logic programming for an example of such a language. 
 Programming environment  
 The language platform provides a self-hosted IDE  and other tools. Racket is also a viable scripting tool and can be used for scripting the Unix shell and includes libraries like all common scripting languages . 
 DrRacket IDE  
 DrRacket (formerly DrScheme) is widely used among introductory Computer Science courses that teach Scheme or Racket and is lauded for its simplicity and appeal to beginner programmers. The IDE was originally built for use with the TeachScheme! project (now ProgramByDesign ), an outreach effort by Northeastern University and a number of affiliated universities for attracting high school students to computer science courses at the college level. 
 The editor provides source highlighting for syntax and run-time errors, parenthesis matching, a debugger and an algebraic stepper. Its student-friendly features include support for multiple "language levels" (Beginning Student, Intermediate Student and so on). It also has integrated library support, and sophisticated analysis tools for advanced programmers. In addition, module-oriented programming is supported with the module browser, a contour view, integrated testing and coverage measurements, and refactoring support. It provides integrated, context-sensitive access to an extensive hyper-linked help system named "Help Desk". 
 DrRacket is available for Windows (95 and up), Mac OS X , Unix , and Linux with the X Window System and programs behave similarly on all these platforms. 
 Code examples  
 See also: Racket examples 
 Here's a trivial "hello world" program: 
 
 
 
#lang racket
 "Hello, World!" 
 
 
 Running this program produces the output: 
 
 "Hello, World!" 
 
 Here's a slightly less trivial program: 
 
 
 
  
The result of this program, as shown in DrRacket 
 
 
 
 
 
#lang racket
 ( require 2htdp / image ) 
 ( let sierpinski (  ) 
 ( if ( zero? n ) 
  ( triangle 2 'solid 'red ) 
  ( let (  ) 
  ( freeze ( above t ( beside t t ) ) ) ) ) ) 
 
 
 This program, taken from the Racket website, draws a Sierpinski triangle , nested to depth 8. 
 Using the #lang directive, a source file can be written in different dialects of Racket. Here is an example of the factorial program in Typed Racket, a statically typed dialect of Racket: 
 
 
 
#lang typed / racket
 ( : fact ( Integer -&gt; Integer ) ) 
 ( define ( fact n ) 
 ( cond  
    ) ) 
 
 
 Applications and practical use  
 Apart from having a basis in programming language theory , Racket was designed to be used as a general-purpose language in production systems. Thus, the Racket distribution features an extensive library that covers systems and network programming, web development,   logic programming , and a complete GUI framework. 
 Racket has several features useful for a commercial language, among them an ability to generate standalone executables under Windows, Mac OS X and Unix, a profiler and debugger included in the integrated development environment (IDE), and a unit testing framework. 
 Racket has been used for commercial projects and web applications. A notable example is the Hacker News website, which runs on Arc , which is developed in Racket. Naughty Dog has used it as a scripting language in several of their video games.  
 References  
 
 
 ^  Racket blog, Racket v5.3.6 
 ^  Strickland, T.S.; Fellesisen, Matthias (2010). "DLS 2010: Contracts for First-Class Classes" . &#160; 
 ^  Sperber, Michael; Dybvig, R. Kent; Flatt, Matthew; Van Straaten, Anton, et al. (August 2007). "Revised 6 Report on the Algorithmic Language Scheme (R6RS)" . Scheme Steering Committee . Retrieved 2011-09-13 . &#160; 
 ^  "Welcome to Racket" . Retrieved 2011-08-15 . &#160; 
 ^  "Dialects of Racket and Scheme" . Retrieved 2011-08-15 . &#160; 
 ^  a   b  Flatt; Findler; Krishnamurthi; Felleisen (1999). "Programming Languages as Operating Systems (or, Revenge of the Son of the Lisp Machine)". &#160; 
 ^  a   b   c  Findler; Clements; Flanagan; Flatt; Krishnamurthi; Steckler; Felleisen (2001). "DrScheme: A Programming Environment for Scheme" . Journal of Functional Programming . &#160; 
 ^  Felleisen; Findler; Flatt; Krishnamurthi (2004). "The TeachScheme! Project: Computing and Programming for Every Student" . Journal of Computer Science Education . &#160; 
 ^  "Overview" . Program by Design . Retrieved 2011-08-17 . &#160; 
 ^  "Macros Matter" . 2007-05-03 . Retrieved 2011-08-08 . &#160; 
 ^  a   b   c  Flatt, M.; Findler, R. B.; Felleisen, M. (2006). "Scheme with Classes, Mixins, and Traits" . Asian Symposium on Programming Languages and Systems . &#160; 
 ^  a   b  Flatt, M.; Felleisen, M. (1998). "Units: Cool Modules for Hot Languages" . Programming Language Design and Implementation . &#160; 
 ^  a   b   c   d  Tobin-Hochstadt, S.; St-Amour, V.; Culpepper, R.; Flatt, M.; Felleisen, M. (2011). "Languages as Libraries" . Programming Language Design and Implementation . &#160; 
 ^  PLaneT : Racket's centralized package distribution system 
 ^  a   b  Matthews, J. (2006). "Component Deployment with PLaneT: You Want it Where?". Scheme and Functional Programming Workshop . &#160; 
 ^  Benson, Brent W. Jr. (October 26–28, 1994). "libscheme: Scheme as a C Library" . Written at Santa Fe, NM. Proceedings of the USENIX Symposium on Very High Level Languages . Berkeley, CA: USENIX Association. pp.&#160;7–19. ISBN &#160; 978-1880446652 . Retrieved July 7, 2013 . &#160; 
 ^  a   b   c   "Rebuilding Racket's Graphics Layer" . 2010-12-08 . Retrieved 2011-08-23 . &#160; 
 ^  Clements, J.; Flatt, M.; Felleisen, M. (2001). "Modeling an Algebraic Stepper" . European Symposium on Programming Languages . &#160; 
 ^  a   b   c   "Racket Core Release Notes" . Retrieved 2012-04-15 . &#160; 
 ^  Flatt, M. (2002). "Composable and Compilable Macros". International Conference on Functional Programming . &#160; 
 ^  "PLT Scheme version 4.0" . 2008-06-12 . Retrieved 2012-08-07 . &#160; 
 ^  "From PLT Scheme to Racket" . Racket-lang.org . Retrieved 2011-08-17 . &#160; 
 ^  "Racket 5.2" . PLT, Inc. 2011-11-09 . Retrieved 2012-06-16 . &#160; 
 ^  "Submodules" . 2012-06-03 . Retrieved 2012-08-07 . &#160; 
 ^  "Racket 5.3" . PLT, Inc. 2012-08-07 . Retrieved 2012-08-07 . &#160; 
 ^  "Racket 5.3.1" . PLT, Inc. 2012-11-07 . Retrieved 2012-11-07 . &#160; 
 ^  Flatt, M.; Yu, G.; R. B.; Felleisen, M. (2007). "Adding Delimited and Composable Control to a Production Programming Environment" . International Conference on Functional Programming . &#160; 
 ^  "Contracts" . &#160; 
 ^  "Threads" . &#160; 
 ^  "Futures" . &#160; 
 ^  "Places" . &#160; 
 ^  Flatt, Matthew (2012). "Creating Languages in Racket" . Communications of the ACM . Retrieved 2012-04-08 . &#160; 
 ^  Findler, R. B.; Felleisen, M. (2002). "Contracts for Higher-Order Functions" . International Conference on Functional Programming . &#160; 
 ^  Flatt, Matthew (2002). "Composable and Compilable Macros, You Want it When?" . International Conference on Functional Programming . &#160; 
 ^  Flatt, Culpepper, Darais, Findler, Macros that Work Together; Compile-Time Bindings, Partial Expansion, and Deﬁnition Contexts 
 ^  Tobin-Hochstadt, S.; Felleisen, M. (2008). "The Design and Implementation of Typed Scheme". Principles of Programming Languages . &#160; 
 ^  Barzilay, E.; Clements, J. (2005). "Laziness Without All the Hard Work: Combining Lazy and Strict Languages for Teaching". Functional and Declarative Programming in Education . &#160; 
 ^  Flatt, M.; Barzilay, E.; Findler, R. B. (2009). "Scribble: Closing the Book on Ad Hoc Documentation Tools". International Conference on Functional Programming . &#160; 
 ^  Findler, R. B.; Flatt, M. (2004). "Slideshow: Functional Presentations". International Conference on Functional Programming . &#160; 
 ^  Felleisen, M.; Findler, R. B.; Flatt, M.; Krishnamurthi, S. (2009). "A Functional I/O System (or Fun for Freshman Kids)" . International Conference on Functional Programming . &#160; 
 ^  Felleisen, M.; Findler, R. B.; Flatt, M.; Krishnamurthi, S. (2004). "The Structure and Interpretation of the Computer Science Curriculum" . Journal of Functional Programming . &#160; 
 ^  a   b   "Parser Tools: lex and yacc-style Parsing" . Retrieved 2011-08-16 . &#160; 
 ^  a   b  Krishnamurthi, Hopkins; McCarthy; Graunke; Pettyjohn; Felleisen (2007). "Implementation and Use of the PLT Scheme Web Server" . Journal of Higher-Order and Symbolic Programming . &#160; 
 ^  Barzilay, E.; Orlovsky, D. (2004). "Foreign Interface for PLT Scheme" . Scheme and Functional Programming . &#160; 
 ^  "Functional mzScheme DSLs in Game Development" . Retrieved 2012-05-08 . &#160; 
 
 
 Further reading  
 
 Felleisen et al. , 2003. How to Design Programs . MIT Press. 
 
 External links  
 Tutorials  
 
 Quick: An Introduction to Racket with Pictures 
 F*dging up a Racket —shows how to write a Brainfuck dialect for Racket 
 Raw strings in Racket —a reader extension for raw strings 
 
 Style guide  
 
 How to Program Racket (work in Progress as of 2011-09-25) 
 
 Website and documentation  
 
 Official website 
 Blog 
 Code Repository 
 PLaneT 
 The Racket Guide 
 The Racket Reference 
 All Racket Documentation 
 



 								 
				Retrieved from " http://en.wikipedia.org/w/index.php?title=Racket_(programming_language)&amp;oldid=597261550 "				 
												 Categories : Functional languages Object-oriented programming languages Extensible syntax programming languages Lisp programming language family Scheme implementations Scheme compilers Scheme interpreters R6RS Scheme Academic programming languages Educational programming languages Pedagogic integrated development environments Cross-platform free software Free compilers and interpreters Programming languages created in 1994 Articles with example Racket code Software using the LGPL license  Hidden categories: Pages using infoboxes with thumbnail images  												 
							 
		 
		 
			 Navigation menu 
			 
				 
	 Personal tools 
	 
 Create account Log in 	 
 
				 
					 
	 Namespaces 
	 
					 Article 
					 Talk 
			 
 
 
	 
		 
	 Variants 
	 
		 
					 
	 
 
				 
				 
					 
	 Views 
	 
					 Read 
					 Edit 
					 View history 
			 
 
 
	 Actions 
	 
		 
					 
	 
 
 
	 Search 
	 
					 
					 		 
	 
 
				 
			 
			 
					 
				 
	 Navigation 
	 
		 
			 Main page 
			 Contents 
			 Featured content 
			 Current events 
			 Random article 
			 Donate to Wikipedia 
			 Wikimedia Shop 
		 
	 
 
 
	 Interaction 
	 
		 
			 Help 
			 About Wikipedia 
			 Community portal 
			 Recent changes 
			 Contact page 
		 
	 
 
 
	 Tools 
	 
		 
			 What links here 
			 Related changes 
			 Upload file 
			 Special pages 
			 Permanent link 
			 Page information 
			 Data item 
 Cite this page 		 
	 
 
 
	 Print/export 
	 
		 
			 Create a book 
			 Download as PDF 
			 Printable version 
		 
	 
 
 
	 Languages 
	 
		 
			 Deutsch 
			 فارسی 
			 Français 
			 日本語 
			 Polski 
			 Português 
			 Русский 
			 Српски / srpski 
			 中文 
			 
			 Edit links 
		 
	 
 
			 
		 
		 
							 
											 This page was last modified on 26 February 2014 at 19:01. 
											 Text is available under the Creative Commons Attribution-ShareAlike License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. 
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc. , a non-profit organization. 
									 
							 
											 Privacy policy 
											 About Wikipedia 
											 Disclaimers 
											 Contact Wikipedia 
											 Developers 
											 Mobile view