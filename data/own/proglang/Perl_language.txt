Perl - Wikipedia, the free encyclopedia 
 
 
 
 
 
 
 
 
 
 
 
 
 
 





 
 
		 
		 
		 
			 
			 
						 
						 Perl 
			 
								 From Wikipedia, the free encyclopedia 
								   (Redirected from Perl language ) 
												 
					Jump to:					 navigation , 					 search 
				 
				 This article is about the programming language. For other uses, see Perl (disambiguation) . 
  
 
 Perl 
 
  
 
 
 Paradigm(s) 
 multi-paradigm : functional , imperative , object-oriented ( class-based ), reflective , procedural , Event-driven , generic 
 
 
 Appeared in 
 1987 
 
 
 Designed by 
 Larry Wall 
 
 
 Developer 
 Larry Wall 
 
 
 Stable release 
 5.18.2  (January&#160;7,&#160;2014 &#160;( 2014-01-07 ) ) 
 
 
 Preview release 
 5.19.8  (January&#160;20,&#160;2014 &#160;( 2014-01-20 ) ) 
 
 
 Typing discipline 
 Dynamic 
 
 
 Influenced by 
 AWK , Smalltalk 80 , Lisp , C , C++ , sed , Unix shell , Pascal 
 
 
 Influenced 
 Python , PHP , Ruby , ECMAScript , LPC , Windows PowerShell , JavaScript , Falcon , Perl 6 , Qore 
 
 
 Implementation language 
 C 
 
 
 OS 
 Cross-platform 
 
 
 License 
 GNU General Public License or Artistic License  
 
 
 Usual filename extensions 
 .pl .pm .t .pod  
 
 
 Website 
 www.perl.org 
 
 
 
 
 Perl Programming at Wikibooks 
 
 
 
 
 Perl is a family of high-level , general-purpose , interpreted , dynamic programming languages . The languages in this family include Perl 5 and Perl 6 .  
 Though Perl is not officially an acronym,  Since then, it has undergone many changes and revisions. The latest major stable revision of Perl 5 is 5.18, released in May 2013. Perl 6 , which began as a redesign of Perl 5 in 2000, eventually evolved into a separate language. Both languages continue to be developed independently by different development teams and liberally borrow ideas from one another. 
 The Perl languages borrow features from other programming languages including C , shell scripting ( sh ), AWK , and sed .  
 In addition to CGI, Perl 5 is used for graphics programming , system administration , network programming , finance, bioinformatics , and other applications. It is nicknamed "the Swiss Army chainsaw of scripting languages" because of its flexibility and power,  
 
 
 
 Contents 
 
 
 1 History 
 
 1.1 Early versions 
 1.2 Early Perl 5 
 1.3 2000–present 
 1.4 Name 
 1.5 Camel symbol 
 1.6 Onion symbol 
 
 
 2 Overview 
 
 2.1 Features 
 2.2 Design 
 2.3 Applications 
 2.4 Implementation 
 2.5 Availability 
 
 2.5.1 Windows 
 
 
 
 
 3 Database interfaces 
 4 Comparative performance 
 
 4.1 Optimizing 
 
 
 5 Perl 6 
 6 Future of Perl 5 
 7 Perl community 
 
 7.1 State of the Onion 
 7.2 Perl pastimes 
 7.3 Perl on IRC 
 7.4 CPAN Acme 
 
 
 8 Example code 
 9 Criticism 
 10 See also 
 11 References 
 12 Further reading 
 13 External links 
 
 
 
 History  
 Early versions  
 Wall began work on Perl in 1987, while working as a programmer at Unisys ,  The language expanded rapidly over the next few years. 
 Perl 2, released in 1988, featured a better regular expression engine. Perl 3, released in 1989, added support for binary data streams. 
 Originally the only documentation for Perl was a single (increasingly lengthy) man page . In 1991, Programming Perl , known to many Perl programmers as the "Camel Book" because of its cover, was published and became the de facto reference for the language. At the same time, the Perl version number was bumped to 4, not to mark a major change in the language but to identify the version that was well documented by the book. 
 Early Perl 5  
 Perl 4 went through a series of maintenance releases , culminating in Perl 4.036 in 1993. At that point, Wall abandoned Perl 4 to begin work on Perl 5. Initial design of Perl 5 continued into 1994. The perl5-porters mailing list was established in May 1994 to coordinate work on porting Perl 5 to different platforms. It remains the primary forum for development, maintenance, and porting of Perl 5.  
 Perl 5.000 was released on October 17, 1994.  It was a nearly complete rewrite of the interpreter , and it added many new features to the language, including objects , references , lexical (my) variables , and modules . Importantly, modules provided a mechanism for extending the language without modifying the interpreter. This allowed the core interpreter to stabilize, even as it enabled ordinary Perl programmers to add new language features. Perl 5 has been in active development since then. 
 Perl 5.001 was released on March 13, 1995. Perl 5.002 was released on February 29, 1996 with the new prototypes feature. This allowed module authors to make subroutines that behaved like Perl builtins . Perl 5.003 was released June 25, 1996, as a security release. 
 One of the most important events in Perl 5 history took place outside of the language proper and was a consequence of its module support. On October 26, 1995, the Comprehensive Perl Archive Network (CPAN) was established as a repository for Perl modules and Perl itself; as of March 2014, it carries over 129,703 modules, written by more than 11,274 authors, and is mirrored worldwide at more than 260 locations.  
 Perl 5.004 was released on May 15, 1997, and included among other things the UNIVERSAL package, giving Perl a base object to which all classes were automatically derived and the ability to require versions of modules. Another significant development was the inclusion of the CGI.pm module,  
 Perl also now supported running under Microsoft Windows and several other operating systems.  
 Perl 5.005 was released on July 22, 1998. This release included several enhancements to the regex engine, new hooks into the backend through the B::* modules, the qr// regex quote operator, a large selection of other new core modules, and added support for several more operating systems, including BeOS .  
 2000–present  
 
 
 Major Version 
 Latest update 
 
 
 Old version, no longer supported: 5.8 
 2008-12-14  
 
 
 Old version, no longer supported: 5.10 
 2009-08-23  
 
 
 Old version, no longer supported: 5.12 
 2012-11-10  
 
 
 Old version, no longer supported: 5.14 
 2013-03-10  
 
 
 Older version, yet still supported: 5.16 
 2013-03-11  
 
 
 Current stable version: 5.18 
 2014-01-07  
 
 
 Future release: 5.19 
 2014-02-20  
 
 
 
  Legend:  Old version  Older version, still supported  Current version  Latest preview version  Future release 
 
 
 
 Perl 5.6 was released on March 22, 2000. Major changes included 64-bit support, Unicode string representation, large file support (i.e. files over 2 GiB) and the "our" keyword.  When developing Perl 5.6, the decision was made to switch the versioning scheme to one more similar to other open source projects; after 5.005_63, the next version became 5.5.640, with plans for development versions to have odd numbers and stable versions to have even numbers. 
 In 2000, Wall put forth a call for suggestions for a new version of Perl from the community. The process resulted in 361 RFC (request for comments) documents which were to be used in guiding development of Perl 6. In 2001,  work began on the apocalypses for Perl 6 , a series of documents meant to summarize the change requests and present the design of the next generation of Perl. They were presented as a digest of the RFCs, rather than a formal document. At this point, Perl 6 existed only as a description of a language. 
 Perl 5.8 was first released on July 18, 2002, and had nearly yearly updates since then. Perl 5.8 improved Unicode support, added a new I/O implementation, added a new thread implementation, improved numeric accuracy, and added several new modules.  As of 2013 this version still remains the most popular version of Perl and is used by Red Hat 5, Suse 10, Solaris 10, HP-UX 11.33 and AIX 5. 
 In 2004, work began on the Synopses – documents that originally summarized the Apocalypses, but which became the specification for the Perl 6 language. In February 2005, Audrey Tang began work on Pugs , a Perl 6 interpreter written in Haskell .  
 On December 18, 2007, the 20th anniversary of Perl 1.0, Perl 5.10.0 was released. Perl 5.10.0 included notable new features, which brought it closer to Perl 6 . These included a switch statement (called "given"/"when"), regular expressions updates, and the smart match operator, "~~".  Around this same time, development began in earnest on another implementation of Perl 6 known as Rakudo Perl , developed in tandem with the Parrot virtual machine . As of November 2009, Rakudo Perl has had regular monthly releases and now is the most complete implementation of Perl 6 . 
 A major change in the development process of Perl 5 occurred with Perl 5.11; the development community has switched to a monthly release cycle of development releases, with a yearly schedule of stable releases. By that plan, bugfix point releases will follow the stable releases every three months. 
 On April 12, 2010, Perl 5.12.0 was released. Notable core enhancements include new package NAME VERSION syntax, the Yada Yada operator (intended to mark placeholder code that is not yet implemented), implicit strictures, full Y2038 compliance, regex conversion overloading, DTrace support, and Unicode 5.2.  Version 5.12.4 was released on June 20, 2011. The latest version of that branch, 5.12.5, was released on November 10, 2012. 
 On May 14, 2011, Perl 5.14 was released. JSON support is built-in as of 5.14.2. The latest version of that branch, 5.14.4, was released on March 10, 2013. 
 On May 20, 2012, Perl 5.16 was released. Notable new features include the ability to specify a given version of Perl that one wishes to emulate, allowing users to upgrade their version of Perl, but still run old scripts that would normally be incompatible.  
 On May 18, 2013, Perl 5.18 was released. Notable new features include the new dtrace hooks, lexical subs, more CORE:: subs, overhaul of the hash for security reasons, support for Unicode 6.2.  
 Some observers credit the release of Perl 5.10 with the start of the Modern Perl movement.  have taken up the cause. 
 In late 2012 and 2013 several projects for alternative implementations for Perl 5 started: Perl5 in Perl6 by the Rakudo Perl team,  
 Name  
 Perl was originally named "Pearl". Wall wanted to give the language a short name with positive connotations; he claims that he considered (and rejected) every three- and four-letter word in the dictionary. He also considered naming it after his wife Gloria. Wall discovered the existing PEARL programming language before Perl's official release and changed the spelling of the name.  
 When referring to the language, the name is normally capitalized ( Perl ) as a proper noun. When referring to the interpreter program itself, the name is often uncapitalized ( perl ) because most Unix-like file systems are case-sensitive. Before the release of the first edition of Programming Perl , it was common to refer to the language as perl ; Randal L. Schwartz , however, capitalized the language's name in the book to make it stand out better when typeset. This case distinction was subsequently documented as canonical.  
 The name is occasionally expanded as Practical Extraction and Report Language , but this is a backronym .  
 Camel symbol  
 
 
 
  
The Camel symbol used by O'Reilly Media 
 
 
 Programming Perl , published by O'Reilly Media , features a picture of a dromedary camel on the cover and is commonly called the "Camel Book".  This image of a camel has become an unofficial symbol of Perl as well as a general hacker emblem, appearing on T-shirts and other clothing items. 
 O'Reilly owns the image as a trademark but licenses it for non-commercial use, requiring only an acknowledgement and a link to www.perl.com. Licensing for commercial use is decided on a case by case basis.  
 Onion symbol  
 
 
 
  
The onion logo used by The Perl Foundation 
 
 
 The Perl Foundation owns an alternative symbol, an onion, which it licenses to its subsidiaries, Perl Mongers , PerlMonks , Perl.org, and others.  
 Overview  
 Main article: Perl language structure 
 According to Wall, Perl has two slogans. The first is " There's more than one way to do it ", commonly known as TMTOWTDI. The second slogan is "Easy things should be easy and hard things should be possible".  
 Features  
 The overall structure of Perl derives broadly from C. Perl is procedural in nature, with variables , expressions , assignment statements , brace -delimited blocks , control structures , and subroutines . 
 Perl also takes features from shell programming. All variables are marked with leading sigils , which unambiguously identify the data type (for example, scalar , array , hash ) of the variable in context. Importantly, sigils allow variables to be interpolated directly into strings . Perl has many built-in functions that provide tools often used in shell programming (although many of these tools are implemented by programs external to the shell) such as sorting , and calling on operating system facilities. 
 Perl takes lists from Lisp , hashes ("associative arrays") from AWK , and regular expressions from sed . These simplify and facilitate many parsing, text-handling, and data-management tasks. Also shared with Lisp are the implicit return of the last value in a block, and the fact that all statements have a value, and thus are also expressions and can be used in larger expressions themselves. 
 Perl 5 added features that support complex data structures , first-class functions (that is, closures as values), and an object-oriented programming model. These include references , packages, class-based method dispatch , and lexically scoped variables , along with compiler directives (for example, the strict pragma). A major additional feature introduced with Perl 5 was the ability to package code as reusable modules. Wall later stated that "The whole intent of Perl 5's module system was to encourage the growth of Perl culture rather than the Perl core."  
 All versions of Perl do automatic data-typing and automatic memory management . The interpreter knows the type and storage requirements of every data object in the program; it allocates and frees storage for them as necessary using reference counting (so it cannot deallocate circular data structures without manual intervention). Legal type conversions — for example, conversions from number to string — are done automatically at run time ; illegal type conversions are fatal errors. 
 Design  
 The design of Perl can be understood as a response to three broad trends in the computer industry: falling hardware costs, rising labor costs, and improvements in compiler technology. Many earlier computer languages, such as Fortran and C, aimed to make efficient use of expensive computer hardware. In contrast, Perl was designed so that computer programmers could write programs more quickly and easily. 
 Perl has many features that ease the task of the programmer at the expense of greater CPU and memory requirements. These include automatic memory management; dynamic typing ; strings, lists, and hashes; regular expressions; introspection; and an eval() function. Perl follows the theory of "no built-in limits",  an idea similar to the Zero One Infinity rule. 
 Wall was trained as a linguist, and the design of Perl is very much informed by linguistic principles. Examples include Huffman coding (common constructions should be short), good end-weighting (the important information should come first), and a large collection of language primitives . Perl favors language constructs that are concise and natural for humans to write, even where they complicate the Perl interpreter. 
 Perl's syntax reflects the idea that "things that are different should look different."  For example, scalars, arrays, and hashes have different leading sigils. Array indices and hash keys use different kinds of braces. Strings and regular expressions have different standard delimiters. This approach can be contrasted with languages such as Lisp , where the same S-expression construct and basic syntax are used for many different purposes. 
 Perl does not enforce any particular programming paradigm ( procedural , object-oriented , functional , or others) or even require the programmer to choose among them. 
 There is a broad practical bent to both the Perl language and the community and culture that surround it. The preface to Programming Perl begins: "Perl is a language for getting your job done."  
 No written specification or standard for the Perl language exists for Perl versions through Perl 5, and there are no plans to create one for the current version of Perl. There has been only one implementation of the interpreter, and the language has evolved along with it. That interpreter, together with its functional tests, stands as a de facto specification of the language. Perl 6 , however, started with a specification,  aim to implement some or all of the specification. 
 Applications  
 Perl has many and varied applications, compounded by the availability of many standard and third-party modules. 
 Perl has chiefly been used to write CGI scripts: large projects written in Perl include cPanel , Slash , Bugzilla , RT , TWiki , and Movable Type ; high-traffic websites that use Perl extensively include bbc.co.uk , Priceline.com , Craigslist ,   Slashdot and Ticketmaster . It is also an optional component of the popular LAMP technology stack for web development , in lieu of PHP or Python . 
 Perl is often used as a glue language , tying together systems and interfaces that were not specifically designed to interoperate, and for " data munging ",  that is, converting or processing large amounts of data for tasks such as creating reports. In fact, these strengths are intimately linked. The combination makes Perl a popular all-purpose language for system administrators , particularly because short programs, often called " one-liner programs ", can be entered and run on a single command line . 
 Perl code can be made portable across Windows and Unix; such code is often used by suppliers of software (both COTS and bespoke) to simplify packaging and maintenance of software build- and deployment-scripts. 
 Graphical user interfaces (GUIs) may be developed using Perl. For example, Perl/Tk and WxPerl are commonly used to enable user interaction with Perl scripts. Such interaction may be synchronous or asynchronous, using callbacks to update the GUI. 
 Implementation  
 Perl is implemented as a core interpreter, written in C, together with a large collection of modules, written in Perl and C. As of 2010  The interpreter is 150,000 lines of C code and compiles to a 1&#160;MB executable on typical machine architectures. Alternatively, the interpreter can be compiled to a link library and embedded in other programs. There are nearly 500 modules in the distribution, comprising 200,000 lines of Perl and an additional 350,000 lines of C code. (Much of the C code in the modules consists of character encoding tables.) 
 The interpreter has an object-oriented architecture. All of the elements of the Perl language—scalars, arrays, hashes, coderefs, file handles —are represented in the interpreter by C structs . Operations on these structs are defined by a large collection of macros , typedefs , and functions; these constitute the Perl C API . The Perl API can be bewildering to the uninitiated, but its entry points follow a consistent naming scheme , which provides guidance to those who use it. 
 The life of a Perl interpreter divides broadly into a compile phase and a run phase.  In Perl, the phases are the major stages in the interpreter's life-cycle. Each interpreter goes through each phase only once, and the phases follow in a fixed sequence. 
 Most of what happens in Perl's compile phase is compilation, and most of what happens in Perl's run phase is execution, but there are significant exceptions. Perl makes important use of its capability to execute Perl code during the compile phase. Perl will also delay compilation into the run phase. The terms that indicate the kind of processing that is actually occurring at any moment are compile time and run time . Perl is in compile time at most points during the compile phase, but compile time may also be entered during the run phase. The compile time for code in a string argument passed to the eval built-in occurs during the run phase. Perl is often in run time during the compile phase and spends most of the run phase in run time. Code in BEGIN blocks executes at run time but in the compile phase. 
 At compile time, the interpreter parses Perl code into a syntax tree . At run time, it executes the program by walking the tree . Text is parsed only once, and the syntax tree is subject to optimization before it is executed, so that execution is relatively efficient. Compile-time optimizations on the syntax tree include constant folding and context propagation, but peephole optimization is also performed. 
 Perl has a Turing-complete grammar because parsing can be affected by run-time code executed during the compile phase.  Therefore, Perl cannot be parsed by a straight Lex / Yacc lexer / parser combination. Instead, the interpreter implements its own lexer, which coordinates with a modified GNU bison parser to resolve ambiguities in the language. 
 It is often said that "Only perl can parse Perl",  meaning that only the Perl interpreter ( perl ) can parse the Perl language ( Perl ), but even this is not, in general, true. Because the Perl interpreter can simulate a Turing machine during its compile phase, it would need to decide the Halting Problem in order to complete parsing in every case. It is a long-standing result that the Halting Problem is undecidable, and therefore not even perl can always parse Perl. Perl makes the unusual choice of giving the user access to its full programming power in its own compile phase. The cost in terms of theoretical purity is high, but practical inconvenience seems to be rare. 
 Other programs that undertake to parse Perl, such as source-code analyzers and auto-indenters , have to contend not only with ambiguous syntactic constructs but also with the undecidability of Perl parsing in the general case. Adam Kennedy's PPI project focused on parsing Perl code as a document (retaining its integrity as a document), instead of parsing Perl as executable code (which not even Perl itself can always do). It was Kennedy who first conjectured that "parsing Perl suffers from the ' Halting Problem '",  
 Perl is distributed with over 250,000 functional tests for core Perl language and over 250,000 functional tests for core modules. These run as part of the normal build process and extensively exercise the interpreter and its core modules. Perl developers rely on the functional tests to ensure that changes to the interpreter do not introduce software bugs ; additionally, Perl users who see that the interpreter passes its functional tests on their system can have a high degree of confidence that it is working properly. 
 Availability  
 Perl is dual licensed under both the Artistic License and the GNU General Public License . Distributions are available for most operating systems . It is particularly prevalent on Unix and Unix-like systems, but it has been ported to most modern (and many obsolete) platforms. With only six reported exceptions, Perl can be compiled from source code on all POSIX -compliant, or otherwise-Unix-compatible platforms.  
 Because of unusual changes required for the Mac OS Classic environment, a special port called MacPerl was shipped independently.  
 The Comprehensive Perl Archive Network carries a complete list of supported platforms with links to the distributions available on each.  CPAN is also the source for publicly available Perl modules that are not part of the core Perl distribution. 
 Windows  
 Users of Microsoft Windows typically install one of the native binary distributions of Perl for Win32, most commonly Strawberry Perl or ActivePerl . Compiling Perl from source code under Windows is possible, but most installations lack the requisite C compiler and build tools. This also makes it difficult to install modules from the CPAN, particularly those that are partially written in C. 
 ActivePerl is a closed source distribution from ActiveState that has regular releases that track the core Perl releases.  a popular tool for installing, removing, upgrading, and managing the use of common Perl modules. 
 Strawberry Perl is an open source distribution for Windows. It has had regular, quarterly releases since January 2008, including new modules as feedback and requests come in. Strawberry Perl aims to be able to install modules like standard Perl distributions on other platforms, including compiling XS modules. 
 The Cygwin emulation layer is another way of running Perl under Windows. Cygwin provides a Unix-like environment on Windows, and both Perl and CPAN are available as standard pre-compiled packages in the Cygwin setup program. Since Cygwin also includes gcc , compiling Perl from source is also possible. 
 Database interfaces  
 Perl's text-handling capabilities can be used for generating SQL queries; arrays, hashes, and automatic memory management make it easy to collect and process the returned data. For example, in Tim Bunce's Perl DBI application programming interface (API), the arguments to the API can be the text of SQL queries; thus it is possible to program in multiple languages at the same time (e.g., for generating a web page using HTML , JavaScript , and SQL in a here document ). The use of Perl variable interpolation to programmatically customize each of the SQL queries, and the specification of Perl arrays or hashes as the structures to programmatically hold the resulting data sets from each SQL query, allows a high-level mechanism for handling large amounts of data for post-processing by a Perl subprogram.  In early versions of Perl, database interfaces were created by relinking the interpreter with a client-side database library. This was sufficiently difficult that it was done for only a few of the most-important and most widely used databases, and it restricted the resulting perl executable to using just one database interface at a time. 
 In Perl 5, database interfaces are implemented by Perl DBI modules. The DBI (Database Interface) module presents a single, database-independent interface to Perl applications, while the DBD (Database Driver) modules handle the details of accessing some 50 different databases; there are DBD drivers for most ANSI SQL databases. 
 DBI provides caching for database handles and queries, which can greatly improve performance in long-lived execution environments such as mod perl ,  helping high-volume systems avert load spikes as in the Slashdot effect . 
 In modern Perl applications, especially those written using Web application frameworks such as Catalyst , the DBI module is often used indirectly via object-relational mappers such as DBIx::Class , Class::DBI or Rose::DB::Object which generate SQL queries and handle data transparently to the application author. 
 Comparative performance  
 The Computer Language Benchmarks Game, a project hosted by Alioth , compares the performance of implementations of typical programming problems in several programming languages.  
 Large Perl programs start more slowly than similar programs in compiled languages because perl has to compile the source every time it runs. In a talk at the YAPC::Europe 2005 conference and subsequent article "A Timely Start", Jean-Louis Leroy found that his Perl programs took much longer to run than expected because the perl interpreter spent significant time finding modules within his over-large include path.  Therefore Perl programs pay this overhead penalty on every execution. The run phase of typical programs is long enough that amortized startup time is not substantial, but benchmarks that measure very short execution times are likely to be skewed due to this overhead. 
 A number of tools have been introduced to improve this situation. The first such tool was Apache's mod perl , which sought to address one of the most-common reasons that small Perl programs were invoked rapidly: CGI Web development. ActivePerl , via Microsoft ISAPI , provides similar performance improvements. 
 Once Perl code is compiled, there is additional overhead during the execution phase that typically isn't present for programs written in compiled languages such as C or C++. Examples of such overhead include bytecode interpretation, reference-counting memory management, and dynamic type-checking. 
 Optimizing  
 Because Perl is an interpreted language, it can give problems when efficiency is critical; in such situations, the most critical routines can be written in other languages such as C , which can be connected to Perl via simple Inline modules or the more complex but flexible XS mechanism.  
 Perl 6  
 Main article: Perl 6 
 
 
 
  
 Camelia , the logo for the Perl 6 project.  
 
 
 At the 2000 Perl Conference , Jon Orwant made a case for a major new language-initiative.  This led to a decision to begin work on a redesign of the language, to be called Perl 6. Proposals for new language features were solicited from the Perl community at large, which submitted more than 300 RFCs . 
 Wall spent the next few years digesting the RFCs and synthesizing them into a coherent framework for Perl 6. He has presented his design for Perl 6 in a series of documents called "apocalypses" - numbered to correspond to chapters in Programming Perl . As of January 2011  
 Perl 6 is not intended to be backward compatible, although there will be a compatibility mode. Perl 6 and Perl 5 are distinct languages with a common ancestry.  
 Thesis work by Bradley M. Kuhn , overseen by Wall, considered the possible use of the Java virtual machine as a runtime for Perl.  Kuhn's thesis showed this approach to be problematic. In 2001, it was decided that Perl 6 would run on a cross-language virtual machine called Parrot . This will mean that other languages targeting the Parrot will gain native access to CPAN , allowing some level of cross-language development. 
 In 2005, Audrey Tang created the pugs project, an implementation of Perl 6 in Haskell . This acted as, and continues to act as, a test platform for the Perl 6 language (separate from the development of the actual implementation) - allowing the language designers to explore. The pugs project spawned an active Perl/Haskell cross-language community centered around the freenode #perl6 IRC channel. 
 As of 2012  
 As of 2012  
 
 Rakudo Perl 6 , an implementation running on the Parrot virtual machine and the Java virtual machine .  
 Niecza , which targets the Common Language Runtime . 
 
 Future of Perl 5  
 Development of Perl 5 is also continuing. Perl 5.12.0 was released in April 2010 with some new features influenced by the design of Perl 6.,  
 Future plans for Perl 5 include making the core language easier to extend from modules, and providing a small, extensible Meta-object protocol in core.  
 The relative proportion of searches for 'Perl programming', as compared with similar searches for other programming languages, steadily declined from about 10% in 2005 to about 2% in 2011, and has remained around the 2% level since.  
 Perl community  
 Perl's culture and community has developed alongside the language itself. Usenet was the first public venue in which Perl was introduced, but over the course of its evolution, Perl's community was shaped by the growth of broadening Internet-based services including the introduction of the World Wide Web. The community that surrounds Perl was, in fact, the topic of Wall's first "State of the Onion" talk.  
 State of the Onion  
 State of the Onion is the name for Wall’s yearly keynote -style summaries on the progress of Perl and its community. They are characterized by his hallmark humor, employing references to Perl’s culture, the wider hacker culture, Wall’s linguistic background, sometimes his family life, and occasionally even his Christian background.  
 Each talk is first given at various Perl conferences and is eventually also published online. 
 Perl pastimes  
 
 JAPHs 
 In email, Usenet, and message board postings, " Just another Perl hacker " (JAPH) programs are a common trend, originated by Randal L. Schwartz , one of the earliest professional Perl trainers.  
 Perl golf 
 Perl "golf" is the pastime of reducing the number of characters (key "strokes") used in a Perl program to the bare minimum, much as how golf players seek to take as few shots as possible in a round. The phrase's first use  A Perl Golf Apocalypse was held at Perl Conference 4.0 in Monterey, California in July 2000. 
 Obfuscation 
 As with C, obfuscated code competitions were a well known pastime in the late 1990s. The Obfuscated Perl Contest was a competition held by The Perl Journal from 1996 to 2000 that made an arch virtue of Perl's syntactic flexibility. Awards were given for categories such as "most powerful"—programs that made efficient use of space—and "best four-line signature" for programs that fit into four lines of 76 characters in the style of a Usenet signature block .  
 Poetry 
 Perl poetry is the practice of writing poems that can be compiled as legal Perl code, for example the piece known as Black Perl . This hobby is made possible by the large number of English words that are used in the Perl language. New poems are regularly submitted to the community at PerlMonks .  
 
 Perl on IRC  
 There are a number of IRC channels that offer support for the language and some modules. 
 
 
 IRC Network 
 Channels 
 
 
 irc.freenode.net 
 #perl #perl6 #cbstream #perlcafe #poe 
 
 
 irc.perl.org 
 #moose #poe #catalyst #dbix-class #perl-help #distzilla #epo #corehackers #sdl #win32 #toolchain #padre 
 
 
 irc.slashnet.org 
 #perlmonks 
 
 
 irc.oftc.net 
 #perl 
 
 
 irc.efnet.net 
 #perlhelp 
 
 
 irc.rizon.net 
 #perl 
 
 
 irc.debian.org 
 #debian-perl 
 
 
 CPAN Acme  
 There are also many examples of code written purely for entertainment on the CPAN . Lingua::Romana::Perligata , for example, allows writing programs in Latin .  Upon execution of such a program, the module translates its source code into regular Perl and runs it. 
 The Perl community has set aside the " Acme " namespace for modules that are fun in nature (but its scope has widened to include exploratory or experimental code or any other module that is not meant to ever be used in production). Some of the Acme modules are deliberately implemented in amusing ways. This includes Acme::Bleach , one of the first modules in the Acme:: namespace,  which allows the program's source code to be "whitened" (i.e., all characters replaced with whitespace) and yet still work. 
 Example code  
 In older versions of Perl, one would write the Hello World program as: 
 
 
 
  print "Hello World! \n " ; 
 
 
 In later versions, which support the say statement, one can also write it as: 
 
 
 
  use 5.010 ; 
 say "Hello World!" ; 
 
 
 Good Perl practices require more complex programs to add the use strict; and use warnings; pragmas , leading into something like: 
 
 
 
  use strict ; 
  use warnings ; 
 
  print "Hello World! \n " ; 
 
 
 Here is a more complex Perl program, that counts down the seconds up to a given threshold: 
 
 
 
 #!/usr/bin/perl 
 use strict ; 
 use warnings ; 
 use IO :: Handle ; 
 
 my ( $remaining , $total ) ; 
 
 $remaining = $total = shift ( @ ARGV ) ; 
 
 STDOUT -&gt; autoflush ( 1 ) ; 
 
 while ( $remaining ) { 
 printf ( "Remaining %s/%s \r " , $remaining --, $total ) ; 
 sleep 1 ; 
 } 
 
 print " \n " ; 
 
 
 The perl interpreter can also be used for one-off scripts on the command line. The following example as invoked from an sh-compatible shell such as Bash translates the string "Bob" in all files ending with .txt in the current directory to "Robert": 
 
 
 
  $ perl -i.bak -lp -e 's/Bob/Robert/g' * .txt
 
 
 Criticism  
 Perl has been referred to as " line noise " by some programmers who claim its syntax makes it a write-only language . The earliest such mention was in the first edition of the book Learning Perl , a Perl 5 tutorial book written by Randal L. Schwartz ,  
 According to the Perl 6 FAQ , Perl 6 was designed to mitigate "the usual suspects" that elicit the "line noise" claim from Perl 5 critics, including the removal of "the majority of the punctuation variables" and the sanitization of the regex syntax.  
 See also  
 
 
 
  
 Free software portal 
 
 
  
 Computer programming portal 
 
 
 
 
 Outline of Perl 
 Perl Data Language 
 Perl Object Environment 
 Plain Old Documentation 
 
 References  
 
 
 ^  "perl 5.18.2 is now available" . perl.org . Retrieved 2014-01-14 . &#160; 
 ^  "Perl 5.19.8 is now available!" . perl.org. 2014-01-20 . Retrieved 2014-02-15 . &#160; 
 ^  "Perl Licensing" . dev.perl.org . Retrieved 2011-01-08 . &#160; 
 ^  "About Perl" . perl.org . Retrieved 2013-04-20 . ""Perl" is a family of languages, "Perl 6" is part of the family, but it is a separate language which has its own development team. Its existence has no significant impact on the continuing development of "Perl 5"." &#160; 
 ^  Lapworth, Leo. "General Questions About Perl" . Perl FAQ . Perl.org . Retrieved 24 February 2012 . &#160; 
 ^  "perl(1): Practical Extraction/Report Language - Linux man page" . Linux.die.net . Retrieved 2013-07-23 . &#160; 
 ^  Sheppard, Doug (2000-10-16). "Beginner's Introduction to Perl" . dev.perl.org . Retrieved 2011-01-08 . &#160; 
 ^  Ashton, Elaine (1999). "The Timeline of Perl and its Culture (v3.0_0505)" . &#160; 
 ^  a   b   c   d   Wall, Larry , Tom Christiansen and Jon Orwant (July 2000). Programming Perl, Third Edition . O'Reilly Media . ISBN &#160; 0-596-00027-8 . &#160; 
 ^  Smith, Roderick W. (21 Jun 2002). Advanced Linux Networking . Addison-Wesley Professional. p.&#160;594. ISBN &#160; 978-0-201-77423-8 . &#160;  |accessdate= requires |url= ( help ) 
 ^  Sheppard, Doug (2000-10-16). "Beginner's Introduction to Perl" . O'Reilly Media . Retrieved 2008-07-27 . &#160; 
 ^  Raymond, Eric (2003-12-23). "Swiss Army chainsaw" . The Jargon File . Retrieved 2-12-09-13 . &#160; Check date values in: |accessdate= ( help ) 
 ^  Leonard, Andrew. "The joy of Perl" . Salon.com . Retrieved 2012-06-05 . &#160; 
 ^  Larry Wall (1988-02-01). "v13i001: Perl, a "replacement" for awk and sed, Part01/10". comp.sources.unix . Web link . Retrieved 2011-01-13 . 
 ^  "perl.perl5.porters archive" . perl.org . Retrieved 2011-01-13 . &#160; 
 ^  "perlhist - the Perl history records" . Perl 5 version 12.2 documentation . perldoc.perl.org . Retrieved 2011-01-21 . &#160; 
 ^  "CPAN" . CPAN . Retrieved 2012-04-14 . &#160; 
 ^  a   b   "perl5004delta - what's new for perl5.004" . Perl 5 version 12.2 documentation . perldoc.perl.org . Retrieved 2011-01-08 . &#160; 
 ^  Patwardhan, Nathan; Siever, Ellen; Spainhour, Stephen (2002). Perl in a Nutshell, Second Edition . O'Reilly Media. ISBN &#160; 978-0-596-00241-1 . &#160;  |accessdate= requires |url= ( help ) 
 ^  "perl5005delta - what's new for perl5.005" . Perl 5 version 12.2 documentation . perldoc.perl.org . Retrieved 2011-01-21 . &#160; 
 ^  a   b   c   d   e   f   g   http://www.cpan.org/src/ . &#160; Missing or empty |title= ( help ) 
 ^  "perl56delta - what's new for perl v5.6.0" . Perl 5 version 12.2 documentation . perldoc.perl.org . Retrieved 2011-01-21 . &#160; 
 ^  "perl56delta - what's new for perl v5.6.x" . Perl 5 version 12.2 documentation . perldoc.perl.org . Retrieved 2011-01-21 . &#160; 
 ^  Wall, Larry. "Apocalypse 1: The Ugly, the Bad, and the Good" . Retrieved 2011-01-08 . &#160; 
 ^  "perl58delta - what is new for perl v5.8.0" . Perl 5 version 12.2 documentation . perldoc.perl.org . Retrieved 2011-01-21 . &#160; 
 ^  "A Plan for Pugs" . O'Reilly Media . 2005-03-03 . Retrieved 2011-01-27 . &#160; 
 ^  Tang, Audrey (2010-04-21). "Re: How to Implement Perl 6 in Ten Years" . PerlMonks . Retrieved 2011-01-03 . &#160; 
 ^  "perl5100delta - what is new for perl 5.10.0" . Perl 5 version 12.2 documentation . perldoc.perl.org . Retrieved 2011-01-08 . &#160; 
 ^  "perlsyn - Perl syntax" . Perl 5 version 12.2 documentation . perldoc.perl.org . Retrieved 2011-01-21 . &#160; 
 ^  a   b   "perl5120delta - what is new for perl v5.12.0" . Perl 5 version 12.2 documentation . perldoc.perl.org . Retrieved 2011-01-08 . &#160; 
 ^  "perldelta - what is new for perl v5.12.3" . Perl 5 version 12.2 documentation . perldoc.perl.org . Retrieved 2011-01-08 . &#160; 
 ^  a   b   "perldelta - what is new for perl v5.16.0" . Perl 5 version 16.0 documentation . metacpan.org . Retrieved 2012-05-21 . &#160; 
 ^  "perl5180delta - what is new for perl v5.18.0 - metacpan.org - Perl programming language" . Perl 5 version 18.0 documentation . metacpan.org . Retrieved 2013-10-27 . &#160; 
 ^  Milestones in the Perl Renaissance - Modern Perl Programming . Modernperlbooks.com. Retrieved on 2013-07-17. 
 ^  Preface (Modern Perl 2011-2012) . Modernperlbooks.com. Retrieved on 2013-07-17. 
 ^  Modern Perl 2011-2012 edition by chromatic | Onyx Neon Press . Onyxneon.com. Retrieved on 2013-07-17. 
 ^  http://www.enlightenedperl.org/ 
 ^  http://www.yapcna.org/yn2013/talk/4725 
 ^  http://blogs.perl.org/users/stevan_little/2013/02/what-is-moe-a-clarification.html 
 ^  http://perl11.org/p2/ 
 ^  http://github.com/goccy/gperl/ 
 ^  Richardson, Marjorie (1999-05-01). "Larry Wall, the Guru of Perl" . Linux Journal . Retrieved 2011-01-03 . &#160; 
 ^  "perlfaq1: What's the difference between "perl" and "Perl"?" . perldoc.perl.org - Perl 5 version 12.2 documentation . &#160; 
 ^  Schwartz, Randal ; foy, brian ; Phoenix, Tom (16 Jun 2011). Learning Perl . O'Reilly Media, Inc. p.&#160;4. ISBN &#160; 978-1449313142 . "Perl is sometimes called the "Practical Extraction and Report Language," although it has also been called a "Pathologically Eclectic Rubbish Lister," among other expansions. It's actually a backronym, not an acronym, since Larry Wall, Perl’s creator, came up with the name first and the expansion later. That’s why "Perl" isn’t in all caps. There's no point in arguing which expansion is correct: Larry endorses both." &#160;  |accessdate= requires |url= ( help ) 
 ^  Wall, Larry . "perl - The Perl language interpreter" . Perl 5 version 12.2 documentation . Retrieved 2011-01-26 . &#160; 
 ^  Wall, Larry . "Re^7: PERL as shibboleth and the Perl community" . PerlMonks . Retrieved 2011-01-02 . &#160; 
 ^  a   b   Schwartz, Randal L ; Phoenix, Tom; foy, brian . Learning Perl, Third Edition . ISBN &#160; 978-0-596-00132-2 . &#160;  |accessdate= requires |url= ( help ) 
 ^  a   b   "The Perl Camel Usage and Trademark Information" . O'Reilly Media . Retrieved 2011-01-09 . &#160; 
 ^  "Perl Trademark" . The Perl Foundation . Retrieved 2011-01-09 . &#160; 
 ^  Gillmore, Dan (1998-10-25). "Republic Of Perl" . Chicago Tribune . Retrieved 2011-01-10 . &#160; 
 ^  "  ". May 10, 1997. 
 ^  Wall, Larry (1997-03-01). "Wherefore Art, Thou?" . Linux Journal . Retrieved 2011-03-13 . &#160; 
 ^  "perlfunc - Perl builtin functions" . Perl 5 version 12.2 documentation . perldoc.perl.org . Retrieved 2011-01-10 . &#160; 
 ^  "Perl 6 Specification" . The Perl 6 Project . Retrieved 2011-01-27 . &#160; 
 ^  "Perl 6 Compilers" . The Perl 6 Project . Retrieved 2011-01-27 . &#160; 
 ^  Gilmore, W. J. Beginning PHP and MySQL: From Novice to Professional, Fourth Edition . Apress. p.&#160;484. ISBN &#160; 978-1-4302-3114-1 . &#160;  |accessdate= requires |url= ( help ) 
 ^  "IMDb Helpdesk: What software/hardware are you using to run the site?" . Internet Movie Database . Retrieved 2011-02-12 . &#160; 
 ^  DuckDuckGo handles a large amount of search queries at 4.5 million queries per day . https://duckduckgo.com/traffic.html 
 ^  DuckDuckGo uses Perl https://news.ycombinator.com/item?id=1500487 
 ^  "Perl Books - Book: Data Munging with Perl" . Perl.org . Retrieved December 30, 2010 . &#160; 
 ^  "Perl Source Code" . CPAN . Retrieved 2011-01-27 . &#160; 
 ^  A description of the Perl 5 interpreter can be found in Programming Perl , 3rd Ed., chapter 18. See particularly page 467, which carefully distinguishes run phase and compile phase from run time and compile time . Perl "time" and "phase" are often confused. 
 ^  Schwartz, Randal . "On Parsing Perl" . Retrieved 2007-01-03 . &#160; 
 ^  "The Perl Journal #19/9.26" . O'Reilly Media . Retrieved 2011-02-04 . &#160; 
 ^  Kennedy, Adam (2006). "PPI—Parse, Analyze and Manipulate Perl (without perl)" . CPAN . &#160; 
 ^  "Rice's Theorem". The Perl Review 4 (3): 23–29. Summer 2008. &#160; and "Perl is Undecidable". The Perl Review 5 (0): 7–11. Fall 2008. &#160; , available online at Kegler, Jeffrey. "Perl and Undecidability" . &#160; 
 ^  Hietaniemi, Jarkko (1998). "Perl Ports (Binary Distributions)" . CPAN.org. &#160; 
 ^  "The MacPerl Pages" . Prime Time Freeware. 1997. &#160; 
 ^  "Perl Ports (Binary Distributions)" . CPAN . Retrieved 2011-01-27 . &#160; 
 ^  "ActivePerl is Perl for Windows, Mac, Linux, AIX, HP-UX &amp; Solaris" . ActiveState Software . Retrieved 2011-01-09 . &#160; 
 ^  "Using PPM" . ActiveState Software . Retrieved 2011-01-09 . &#160; 
 ^  Descartes, Alligator; Bunce, Tim (2000). Programming the Perl DBI&#160;: : O'Reilly. ISBN &#160; 1-56592-699-4 . &#160; 
 ^  Bekman, Stas. "Efficient Work with Databases under mod_perl" . Retrieved 2007-09-01 . &#160; 
 ^  "Alioth: The Computer Language Benchmarks Game: Project Info" . Alioth . Retrieved 2011-01-13 . &#160; 
 ^  "Which programs are fastest?" . Computer Language Benchmarks Game . Alioth . Retrieved 2011-01-13 . &#160; 
 ^  Leroy, Jean-Louis (2005-12-01). "A Timely Start" . O'Reilly. &#160; 
 ^  Beattie, Malcolm and Enache Adrian (2003). "B::Bytecode Perl compiler's bytecode backend" . CPAN . &#160; 
 ^  Ingerson, Brian. "Inline - metacpan.org" . CPAN . Retrieved 2011-01-26 . &#160;  
 ^  "Perl 6" . The Perl 6 Project . Retrieved 2011-02-27 . &#160; 
 ^  Torkington, Nathan. "Transcription of Larry's talk" . nntp.perl.org . Retrieved 2011-01-25 . &#160; 
 ^  "Official Perl 6 Documentation" . The Perl 6 Project . Retrieved 2011-01-25 . &#160; 
 ^  "Perl 6 - dev.perl.org" . dev.perl.org . Retrieved 2011-01-25 . &#160; 
 ^  Kuhn, Bradley (January 2001). Considerations on Porting Perl to the Java Virtual Machine . University of Cincinnati . Retrieved 2008-06-28 . &#160; 
 ^  "Feature comparison of Perl 6 compilers" . &#160; 
 ^  Worthington, Jonathan. "Rakudo JVM News: More tests, plus Thread and Promise prototypes" . 6guts . Retrieved 24 July 2013 . &#160; 
 ^  Worthington, Jonathan. "MoarVM: A virtual machine for NQP and Rakudo" . 6guts . Retrieved 24 July 2013 . &#160; 
 ^  "Perl 5.12.0 released - Update" . Heise Media UK. 2010-04-13. Archived from the original on 19 April 2010 . Retrieved 2011-01-08 . &#160; 
 ^  "perl 5.16.1 released!" . 2012-08-09 . Retrieved 2012-08-26 . &#160; 
 ^  "The unstoppable Perl release train?" . LWN.net. 2012-02-29 . Retrieved 2012-03-28 . &#160; 
 ^  "Perl 5.16 and beyond" . 2012-03-12. &#160; 
 ^  TIOBE Software Index (2013). "TIOBE Programming Community Index Perl" . Retrieved 2013-10-10 . &#160; 
 ^  Wall, Larry (1997-08-20). "Perl Culture (AKA the first State of the Onion)" . &#160;  
 ^  Larry Wall. "2nd State of the Onion" . Retrieved 2012-10-12 . &#160; (Search for 'church') 
 ^  Randal L. Schwartz (1999-05-02). " Who is Just another Perl hacker? ". comp.lang.perl.misc . Web link . Retrieved 2007-11-12 . 
 ^  Schwartz, Randal (2005-03-31). "Canonical JAPH" . PerlMonks . Retrieved 2011-05-16 . &#160; 
 ^  Greg Bacon (1999-05-28). " Re: Incrementing a value in a slice ". comp.lang.perl.misc . Web link . Retrieved 2011-07-12 . 
 ^  Back, Adam. "RSA in 5 lines of perl" . Retrieved 2011-01-10 . &#160; 
 ^  "Code Golf: What is Code Golf?" . 29degrees. 2007. &#160; 
 ^  Gallo, Felix (2003). "The Zeroth Obfuscated Perl Contest" . In Jon Orwant. Games, diversions, and Perl culture: best of the Perl journal . O'Reilly Media . Retrieved 2011-01-12 . &#160; 
 ^  "Perl Poetry" . PerlMonks . Retrieved 2011-01-27 . &#160; 
 ^  Conway, Damian. "Lingua::Romana::Perligata -- Perl for the XXI-imum Century" . &#160; 
 ^  Brocard, Leon (2001-05-23). "use Perl; Journal of acme" . use Perl. &#160;  
 ^  Dr. Dobb's Developer Update (Miller-Freeman) 2 . 1995. &#160; 
 ^  a   b   Schwartz, Randal L. (1993). Learning Perl , . O'Reilly &amp; Associates. &#160; 
 ^  "perlintro" . Perl 5 version 18.0 documentation . Perl 5 Porters and perldoc.perl.org . Retrieved 2013-06-30 . &#160; 
 ^  "perlstyle" . Perl 5 version 18.0 documentation . Perl 5 Porters and perldoc.perl.org . Retrieved 2013-06-30 . &#160; 
 ^  a   b   "Perl 6 FAQ" . Perl 6 Project . Retrieved 2013-06-30 . &#160; 
 ^  a   b   chromatic (December 31, 2012). "The Implementation of Perl 5 versus Perl 6" . Retrieved 2013-06-30 . &#160; 
 
 
 Further reading  
 
 Learning Perl 6th Edition (2011), O'Reilly. Beginner-level introduction to Perl. 
 Beginning Perl 1st Edition (2012), Wrox. A beginner's tutorial for those new to programming or just new to Perl. 
 Modern Perl 2nd Edition (2012), Onyx Neon. Describes Modern Perl programming techniques. 
 Programming Perl 4th Edition (2012), O'Reilly. The definitive Perl reference. 
 Effective Perl Programming 2nd Edition (2010), Addison-Wesley. Intermediate- to advanced-level guide to writing idiomatic Perl. 
 Perl Cookbook , ISBN 0-596-00313-7 . Practical Perl programming examples. 
 Dominus, Mark Jason (2005). Higher Order Perl . Morgan Kaufmann. ISBN &#160; 1-55860-701-3 . &#160; Functional programming techniques in Perl. 
 
 External links  
 
 
 Find more about Perl at Wikipedia's sister projects 
 
 
  
 Definitions and translations from Wiktionary 
 
 
  
 Media from Commons 
 
 
  
 Quotations from Wikiquote 
 
 
  
 Textbooks from Wikibooks 
 
 
  
 Learning resources from Wikiversity 
 
 
 
 Official website Perl.org 
 Comprehensive Perl Archive Network The canonical location for Perl code and modules 
 The Perl Foundation 
 PerlMonks A community committed to sharing Perl knowledge and coding tips 
 
 
 
 
 
 
 
 
 
 v 
 t 
 e 
 
 
 Perl 
 
 
 
 
 
 
 People 
 
 
 
 Larry Wall 
 Randal L. Schwartz 
 Damian Conway 
 Allison Randal 
 Audrey Tang 
 Simon Cozens 
 Sean M. Burke 
 chromatic 
 Adam Kennedy 
 brian d foy 
 Mark Jason Dominus 
 Jesse Vincent 
 
 
 
 
 
 
 
 
 Things 
 
 
 
 CPAN 
 The Perl Foundation 
 
 Perl Mongers 
 PerlMonks 
 archives 
 
 
 module 
 Perl VM 
 Parrot 
 YAPC 
 
 
 
 
 
 
 
 
 Frameworks 
 
 
 
 Bioperl 
 Catalyst 
 Dancer 
 DBI 
 DBIx::Class 
 LWP 
 Mason 
 Maypole 
 Mojolicious 
 Moose 
 Plack 
 PSGI 
 Template Toolkit 
 
 
 
 
 
 
 
 
 Software 
 
 
 
 Amavis 
 Argus 
 @SSP 
 AWStats 
 BackupPC 
 Bricolage 
 Bugzilla 
 Makepp 
 Movable Type 
 Munin 
 OTRS 
 SpamAssassin 
 TWiki / Foswiki 
 W3Perl 
 
 
 
 
 
 
 
 
 
 
 
 Outline 
 Category 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 v 
 t 
 e 
 
 
 Free and open-source software 
 
 
 
 
 
 
 General 
 
 
 
 Alternative terms for free software 
 Comparison of open source and closed source 
 Comparison of open-source software hosting facilities 
 Formerly proprietary software 
 Free and open-source Android applications 
 Free and open-source software packages 
 Free software 
 Free software events 
 Free software movement 
 Free software project directories 
 Free software web applications 
 Gratis versus libre 
 Long-term support 
 Open-source software 
 Outline 
 SPDX 
 
 
 
 
 
 
 
 
 Operating system 
families 
 
 
 
 AROS 
 BSD 
 Darwin 
 eCos 
 FreeDOS 
 GNU 
 Haiku 
 Inferno 
 Linux 
 Mach 
 MINIX 
 OpenSolaris 
 Plan 9 
 ReactOS 
 
 
 
 
 
 
 
 
 Development 
 
 
 
 Basic For Qt 
 Eclipse 
 Free Pascal 
 FreeBASIC 
 Gambas 
 GCC 
 Java 
 LLVM 
 Lua 
 NetBeans 
 Open64 
 Perl 
 PHP 
 Python 
 ROSE 
 Ruby 
 Tcl 
 
 
 
 
 
 
 
 
 History 
 
 
 
 GNU 
 Haiku 
 Linux 
 Mozilla 
 
 Application Suite 
 Firefox 
 Thunderbird 
 
 
 
 
 
 
 
 
 
 
 Organizations 
 
 
 
 Android Open Source Project 
 Apache Software Foundation 
 Blender Foundation 
 The Document Foundation 
 Eclipse Foundation 
 Free Software Foundation 
 
 Europe 
 India 
 Latin America 
 
 
 FreeBSD Foundation 
 freedesktop.org 
 FSMI 
 GNOME Foundation 
 GNU Project 
 Google Code 
 KDE e.V. 
 Linux Foundation 
 Mozilla Foundation 
 Open Knowledge Foundation 
 Open Source Geospatial Foundation 
 Open Source Initiative 
 Software Freedom Conservancy 
 SourceForge 
 Symbian Foundation 
 Ubuntu Foundation 
 X.Org Foundation 
 Xiph.Org Foundation 
 XMPP Standards Foundation 
 
 
 
 
 
 
 
 
 Licenses 
 
 
 
 Apache 
 Artistic 
 Beerware 
 Boost 
 BSD 
 CC0 
 GNU GPL 
 GNU LGPL 
 ISC 
 MIT 
 MPL 
 Ms-PL/RL 
 WTFPL 
 zlib 
 
 
 
 
 
 
 
 
 License types 
and standards 
 
 
 
 Comparison of free and open-source software licenses 
 Contributor License Agreement 
 Copyfree 
 Copyleft 
 Debian Free Software Guidelines 
 Definition of Free Cultural Works 
 Free license 
 The Free Software Definition 
 The Open Source Definition 
 Open-source license 
 Permissive free software licence 
 Public domain 
 Viral license 
 
 
 
 
 
 
 
 
 Challenges 
 
 
 
 Binary blob 
 Digital rights management 
 Free and open-source graphics device driver 
 Hardware restrictions 
 License proliferation 
 Mozilla software rebranding 
 Proprietary software 
 SCO–Linux controversies 
 Secure boot 
 Software patents 
 Software security 
 Trusted Computing 
 
 
 
 
 
 
 
 
 Related topics 
 
 
 
 The Cathedral and the Bazaar 
 Forking 
 Linux distribution 
 Microsoft Open Specification Promise 
 Revolution OS 
 
 
 
 
 
 
 
 
 
 
 
 Book 
 Category 
 Commons 
 Portal 
 
 
 
 
 
 
 
 
 



 								 
				Retrieved from " http://en.wikipedia.org/w/index.php?title=Perl&amp;oldid=598254617 "				 
												 Categories : Perl American inventions Cross-platform software Dynamic programming languages Dynamically typed programming languages Free compilers and interpreters Free software programmed in C High-level programming languages Object-oriented programming languages Procedural programming languages Programming languages created in 1987 Scripting languages Software using the Artistic license Text-oriented programming languages Unix programming tools  Hidden categories: Pages using citations with accessdate and no URL CS1 errors: dates Pages with citations lacking titles Pages with citations having bare URLs All articles with dead external links Articles with dead external links from April 2012 Articles with dead external links from July 2013 Good articles All articles with unsourced statements Articles with unsourced statements from July 2013 Articles containing potentially dated statements from 2010 All articles containing potentially dated statements Articles containing potentially dated statements from January 2011 Articles containing potentially dated statements from 2012 Articles with unsourced statements from August 2011  												 
							 
		 
		 
			 Navigation menu 
			 
				 
	 Personal tools 
	 
 Create account Log in 	 
 
				 
					 
	 Namespaces 
	 
					 Article 
					 Talk 
			 
 
 
	 
		 
	 Variants 
	 
		 
					 
	 
 
				 
				 
					 
	 Views 
	 
					 Read 
					 Edit 
					 View history 
			 
 
 
	 Actions 
	 
		 
					 
	 
 
 
	 Search 
	 
					 
					 		 
	 
 
				 
			 
			 
					 
				 
	 Navigation 
	 
		 
			 Main page 
			 Contents 
			 Featured content 
			 Current events 
			 Random article 
			 Donate to Wikipedia 
			 Wikimedia Shop 
		 
	 
 
 
	 Interaction 
	 
		 
			 Help 
			 About Wikipedia 
			 Community portal 
			 Recent changes 
			 Contact page 
		 
	 
 
 
	 Tools 
	 
		 
			 What links here 
			 Related changes 
			 Upload file 
			 Special pages 
			 Permanent link 
			 Page information 
			 Data item 
 Cite this page 		 
	 
 
 
	 Print/export 
	 
		 
			 Create a book 
			 Download as PDF 
			 Printable version 
		 
	 
 
 
	 Languages 
	 
		 
			 Alemannisch 
			 العربية 
			 Azərbaycanca 
			 বাংলা 
			 Bân-lâm-gú 
			 Беларуская 
			 Български 
			 Bosanski 
			 Català 
			 Čeština 
			 Cymraeg 
			 Dansk 
			 Deitsch 
			 Deutsch 
			 Eesti 
			 Ελληνικά 
			 Español 
			 Esperanto 
			 Euskara 
			 فارسی 
			 Français 
			 Gaeilge 
			 Galego 
			 ગુજરાતી 
			 한국어 
			 Հայերեն 
			 हिन्दी 
			 Hrvatski 
			 Bahasa Indonesia 
			 Italiano 
			 עברית 
			 ಕನ್ನಡ 
			 ქართული 
			 Қазақша 
			 Kurdî 
			 Latina 
			 Latviešu 
			 Lëtzebuergesch 
			 Lietuvių 
			 Magyar 
			 Македонски 
			 മലയാളം 
			 मराठी 
			 Bahasa Melayu 
			 မြန်မာဘာသာ 
			 Nederlands 
			 日本語 
			 Norsk bokmål 
			 Norsk nynorsk 
			 ଓଡ଼ିଆ 
			 Polski 
			 Português 
			 Română 
			 Русский 
			 Саха тыла 
			 Shqip 
			 Simple English 
			 Slovenčina 
			 Slovenščina 
			 کوردی 
			 Српски / srpski 
			 Srpskohrvatski / српскохрватски 
			 Suomi 
			 Svenska 
			 தமிழ் 
			 ไทย 
			 Тоҷикӣ 
			 Türkçe 
			 Українська 
			 اردو 
			 Tiếng Việt 
			 Žemaitėška 
			 中文 
			 
			 Edit links 
		 
	 
 
			 
		 
		 
							 
											 This page was last modified on 5 March 2014 at 13:49. 
											 Text is available under the Creative Commons Attribution-ShareAlike License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. 
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc. , a non-profit organization. 
									 
							 
											 Privacy policy 
											 About Wikipedia 
											 Disclaimers 
											 Contact Wikipedia 
											 Developers 
											 Mobile view