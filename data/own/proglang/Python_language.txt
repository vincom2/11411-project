Python (programming language) - Wikipedia, the free encyclopedia 
 
 
 
 
 
 
 
 
 
 
 
 
 
 





 
 
		 
		 
		 
			 
			 
						 
						 Python (programming language) 
			 
								 From Wikipedia, the free encyclopedia 
								   (Redirected from Python language ) 
												 
					Jump to:					 navigation , 					 search 
				 
				 
 Python 
 
  
 
 
 Paradigm(s) 
 Multi-paradigm : object-oriented , imperative , functional , procedural , reflective 
 
 
 Appeared in 
 1991 ; 23&#160;years ago &#160;( 1991 ) 
 
 
 Designed by 
 Guido van Rossum 
 
 
 Developer 
 Python Software Foundation 
 
 
 Stable release 
 3.3.5 / 
9&#160;March&#160;2014 &#160;( 2014-03-09 )  
2.7.6 / 
10&#160;November&#160;2013 &#160;( 2013-11-10 )  
 
 
 Preview release 
 3.3.5 rc1 / 
23&#160;February&#160;2014 &#160;( 2014-02-23 )  
3.4.0 rc2 / 
23&#160;February&#160;2014 &#160;( 2014-02-23 )  
 
 
 Typing discipline 
 duck , dynamic , strong 
 
 
 Major implementations 
 CPython , PyPy , IronPython , Jython 
 
 
 Dialects 
 Cython , RPython , Stackless Python 
 
 
 Influenced by 
 ABC ,   Perl 
 
 
 Influenced 
 Boo , Cobra , D , F# , Falcon , Go , Groovy , JavaScript  
 
 
 OS 
 Cross-platform 
 
 
 License 
 Python Software Foundation License 
 
 
 Usual filename extensions 
 .py, .pyw, .pyc, .pyo, .pyd 
 
 
 Website 
 Official website 
 
 
 
 
 Python Programming at Wikibooks 
 
 
 
 
 Python is a widely used general-purpose , high-level programming language .  
 Python supports multiple programming paradigms , including object-oriented , imperative and functional programming or procedural styles. It features a dynamic type system and automatic memory management and has a large and comprehensive standard library .  
 Like other dynamic languages , Python is often used as a scripting language , but is also used in a wide range of non-scripting contexts. Using third-party tools, such as Py2exe , or Pyinstaller ,  Python code can be packaged into standalone executable programs. Python interpreters are available for many operating systems. 
 CPython , the reference implementation of Python, is free and open source software and has a community-based development model, as do nearly all of its alternative implementations. CPython is managed by the non-profit Python Software Foundation . 
 
 
 
 Contents 
 
 
 1 History 
 2 Features and philosophy 
 3 Syntax and semantics 
 
 3.1 Indentation 
 3.2 Statements and control flow 
 3.3 Expressions 
 3.4 Methods 
 3.5 Typing 
 3.6 Mathematics 
 
 
 4 Libraries 
 5 Development environments 
 6 Implementations 
 7 Development 
 8 Naming 
 9 Use 
 10 Impact 
 11 See also 
 12 References 
 13 Further reading 
 14 External links 
 
 
 
 History  
 
 
 
  
 Guido van Rossum , the creator of Python 
 
 
 Main article: History of Python 
 Python was conceived in the late 1980s  Van Rossum is Python's principal author, and his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community, Benevolent Dictator for Life (BDFL). 
 Python 2.0 was released on 16 October 2000, with many major new features including a full garbage collector and support for Unicode . With this release the development process was changed and became more transparent and community-backed.  
 Python 3.0 (also called Python 3000 or py3k), a major, backwards-incompatible release, was released on 3 December 2008  
 Features and philosophy  
 Python is a multi-paradigm programming language : object-oriented programming and structured programming are fully supported, and there are a number of language features which support functional programming and aspect-oriented programming (including by metaprogramming  
 Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management . An important feature of Python is dynamic name resolution ( late binding ), which binds method and variable names during program execution. 
 The design of Python offers only limited support for functional programming in the Lisp tradition. The language has map(), reduce() and filter() functions, comprehensions for lists, dictionaries , and sets, as well as generator expressions.  
 The core philosophy of the language is summarized by the document "PEP 20 (The Zen of Python)", which includes aphorisms such as:  
 
 Beautiful is better than ugly 
 Explicit is better than implicit 
 Simple is better than complex 
 Complex is better than complicated 
 Readability counts 
 
 Rather than requiring all desired functionality to be built into the language's core, Python was designed to be highly extensible. Python can also be embedded in existing applications that need a programmable interface. This design of a small core language with a large standard library and an easily extensible interpreter was intended by Van Rossum from the very start because of his frustrations with ABC (which espoused the opposite mindset).  
 While offering choice in coding methodology, the Python philosophy rejects exuberant syntax, such as in Perl , in favor of a sparser, less-cluttered grammar. As Alex Martelli put it: "To describe something as clever is not considered a compliment in the Python culture."  
 Python's developers strive to avoid premature optimization , and moreover, reject patches to non-critical parts of CPython which would offer a marginal increase in speed at the cost of clarity.  When speed is important, Python programmers use PyPy , a just-in-time compiler , or move time-critical functions to extension modules written in languages such as C. Cython is also available which translates a Python script into C and makes direct C level API calls into the Python interpreter. 
 An important goal of the Python developers is making Python fun to use. This is reflected in the origin of the name which comes from Monty Python ,  
 A common neologism in the Python community is pythonic , which can have a wide range of meanings related to program style. To say that code is pythonic is to say that it uses Python idioms well, that it is natural or shows fluency in the language, that it conforms with Python's minimalist philosophy and emphasis on readability. In contrast, code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic . 
 Users and admirers of Python—most especially those considered knowledgeable or experienced—are often referred to as Pythonists , Pythonistas , and Pythoneers .  
 Syntax and semantics  
 Main article: Python syntax and semantics 
 Python is intended to be a highly readable language. It is designed to have an uncluttered visual layout, frequently using English keywords where other languages use punctuation. Furthermore Python has a smaller number of syntactic exceptions and special cases than C or Pascal .  
 Indentation  
 Main article: Python syntax and semantics#Indentation 
 Python uses whitespace indentation, rather than curly braces or keywords, to delimit blocks ; a feature also termed the off-side rule . An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.  
 Statements and control flow  
 Python's statements include (among others): 
 
 The if statement , which conditionally executes a block of code, along with else and elif (a contraction of else-if). 
 The for statement , which iterates over an iterable object, capturing each element to a local variable for use by the attached block. 
 The while statement , which executes a block of code as long as its condition is true. 
 The try statement, which allows exceptions raised in its attached code block to be caught and handled by except clauses; it also ensures that clean-up code in a finally block will always be run regardless of how the block exits. 
 The class statement, which executes a block of code and attaches its local namespace to a class , for use in object-oriented programming . 
 The def statement, which defines a function or method . 
 The with statement (from Python 2.5), which encloses a code block within a context manager (for example, acquiring a lock before the block of code is run and releasing the lock afterwards, or opening a file and then closing it), allowing RAII -like behavior. 
 The pass statement, which serves as a NOP . It is syntactically needed to create an empty code block. 
 The assert statement , used during debugging to check for conditions that ought to apply. 
 The yield statement, which returns a value from a generator function. From Python 2.5, yield is also an operator. This form is used to implement coroutines . 
 The import statement, which is used to import modules whose functions or variables can be used in the current program. 
 print() was changed to a function in Python 3.  
 
 Python does not support tail-call optimization or first-class continuations , and, according to Guido van Rossum, it never will.  
 Expressions  
 Python expressions are similar to languages such as C and Java : 
 
 Addition, subtraction, and multiplication are the same, but the behavior of division differs (see Mathematics for details). Python also adds the ** operator for exponentiation. 
 In Python, == compares by value, in contrast to Java, where it compares by reference. (Value comparisons in Java use the equals() method.) Python's is operator may be used to compare object identities (comparison by reference). Comparisons may be chained, for example a &lt;= b &lt;= c . 
 Python uses the words and , or , not for its boolean operators rather than the symbolic &amp;&amp; , || , ! used in Java and C. 
 Python has a type of expression termed a list comprehension . Python 2.4 extended list comprehensions into a more general expression termed a generator expression .  
 Anonymous functions are implemented using lambda expressions ; however, these are limited in that the body can only be a single expression. 
 Conditional expressions in Python are written as x if c else y  (different in order of operands from the ?: operator common to many other languages). 
 Python makes a distinction between lists and tuples . Lists are written as  , are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be immutable in Python). Tuples are written as (1, 2, 3) , are immutable and thus can be used as the keys of dictionaries, provided all elements of the tuple are immutable. The parentheses around the tuple are optional in some contexts. Tuples can appear on the left side of an equal sign; hence a statement like x, y = y, x can be used to swap two variables. 
 Python has a "string format" operator % . This functions analogous to printf format strings in C , e.g. "foo=%s bar=%d"&#160;% ("blah", 2) evaluates to "foo=blah bar=2" . In Python 3 and 2.6+, this was supplemented by the format() method of the str class, e.g. "foo={0} bar={1}".format("blah", 2) . 
 Python has various kinds of string literals :
 
 Strings delimited by single or double quotation marks. Unlike in Unix shells , Perl and Perl-influenced languages, single quotation marks and double quotation marks function similarly. Both kinds of string use the backslash ( \ ) as an escape character and there is no implicit string interpolation such as "$foo" . 
 Triple-quoted strings, which begin and end with a series of three single or double quotation marks. They may span multiple lines and function like here documents in shells, Perl and Ruby . 
 Raw string varieties, denoted by prefixing the string literal with an r . No escape sequences are interpreted; hence raw strings are useful where literal backslashes are common, such as regular expressions and Windows -style paths. Compare " @ -quoting" in C# . 
 
 
 Python has index and slice expressions on lists, denoted as a returns a copy of the entire list. Each element of a slice is a shallow copy . 
 
 In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as Common Lisp , Scheme , or Ruby . This leads to some duplication of functionality. For example: 
 
 List comprehensions vs. for -loops 
 Conditional expressions vs. if blocks 
 The eval() vs. exec() built-in functions (in Python 2, exec is a statement); the former is for expressions, the latter is for statements. 
 
 Statements cannot be a part of an expression and so list and other comprehensions or lambda expressions , all being expressions, cannot contain statements. A particular case of this is that an assignment statement such as a = 1 cannot form part of the conditional expression of a conditional statement. This has the advantage of avoiding a classic C error of mistaking an assignment operator = for an equality operator == in conditions: if (c = 1) { ... } is valid C code but if c = 1: ... causes a syntax error in Python. 
 Methods  
 Methods on objects are functions attached to the object's class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument) . Python methods have an explicit self parameter to access instance data , in contrast to the implicit self in some other object-oriented programming languages (for example, Java , C++ or Ruby ).  
 Typing  
 Python uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile time ; rather, operations on an object may fail, signifying that the given object is not of a suitable type. Despite being dynamically typed , Python is strongly typed , forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them. 
 Python allows programmers to define their own types using classes , which are most often used for object-oriented programming . New instances of classes are constructed by calling the class (for example, SpamClass() or EggsClass() ), and the classes themselves are instances of the metaclass type (itself an instance of itself), allowing metaprogramming and reflection . 
 Prior to version 3.0, Python had two kinds of classes: "old-style" and "new-style".  Old-style classes were eliminated in Python 3.0, making all classes new-style. In versions between 2.2 and 3.0, both kinds of classes could be used. The syntax of both styles is the same, the difference being whether the class object is inherited from, directly or indirectly (all new-style classes inherit from object and are instances of type ). 
 
 Summary of Python 3's built-in types 
 
 Type 
 Description 
 Syntax example 
 
 
 str 
 A character string : an immutable sequence of Unicode codepoints. 
 'Wikipedia' 
 "Wikipedia" 
 """Spanning 
multiple 
lines""" 
 
 
 bytearray 
 A mutable sequence of bytes . 
 bytearray(b'Some ASCII') 
 bytearray(b"Some ASCII") 
 bytearray() 
 
 
 bytes 
 An immutable sequence of bytes. 
 b'Some ASCII' 
 b"Some ASCII" 
 bytes() 
 
 
 list 
 Mutable list , can contain mixed types. 
  
 
 
 tuple 
 Immutable, can contain mixed types. 
 (4.0, 'string', True) 
 
 
 set , frozenset 
 Unordered set , contains no duplicates. A frozenset is immutable. Either can contain mixed types as long as they are hashable. 
 {4.0, 'string', True} 
 frozenset() 
 
 
 dict 
 A mutable associative array (or dictionary) of key and value pairs. Can contain mixed types (keys and values). Keys must be a hashable type. 
 {'key1': 1.0, 3: False} 
 
 
 int 
 An immutable integer of unlimited magnitude.  
 42 
 
 
 float 
 An immutable floating point number (system-defined precision). 
 3.1415927 
 
 
 complex 
 An immutable complex number with real and imaginary parts. 
 3+2.7j 
 
 
 bool 
 An immutable boolean value. 
 True 
 False 
 
 
 Mathematics  
 Python has the usual C arithmetic operators (+, -, *, /,&#160;%). It also has ** for exponentiation, e.g. 5**3 == 125 and 9**.5 == 3.0 . 
 The behavior of division has changed significantly over time.  
 
 Python 2.1 and earlier use the C division behavior. The / operator is integer division if both operands are integers, and floating point division otherwise. Integer division rounds towards 0, e.g. 7 / 3 == 2 and -7 / 3 == -2 . 
 Python 2.2 changes integer division to round towards negative infinity, e.g. 7 / 3 == 2 and -7 / 3 == -3 . The floor division // operator is introduced. So 7 // 3 == 2 , -7 // 3 == -3 , 7.5 // 3 == 2.0 and -7.5 // 3 == -3.0 . Adding from future import __division__ causes a module to use Python 3.0 rules for division (see next). 
 Python 3.0 changes / to always be floating point division. In Python terms, the pre-3.0 / is "classic division", the 3.0 / is "real division", and // is "floor division". 
 
 Rounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation (a+b) // b == a // b + 1 is always true. It also means that the equation b * (a // b) + a&#160;% b == a is valid for both positive and negative values of a . However, maintaining the validity of this equation means that while the result of a&#160;% b is, as expected, in the half-open interval  
 Python provides a round function for rounding floats to integers. Versions before 3 use round-away-from-zero: round(0.5) is 1.0, round(-0.5) is −1.0.  The Decimal type/class in module decimal (since version 2.4) provides exact numerical representation and several rounding modes. 
 Python allows boolean expressions with multiple equality relations in a manner that is consistent with general usage in mathematics. For example, the expression a &lt; b &lt; c tests whether a is less than b and b is less than c . C-derived languages interpret this expression differently: in C, the expression would first evaluate a &lt; b , resulting in 0 or 1, and that result would then be compared with c .  
 Due to Python's extensive mathematics library, it is frequently used as a scientific scripting language to aid in small-scale problems such as data processing and manipulation. 
 Libraries  
 Python has a large standard library , commonly cited as one of Python's greatest strengths,  manipulating regular expressions , and doing unit testing are also included. For software testing , the standard library provides the unittest and doctest modules. 
 Some parts of the standard library are covered by specifications (for example, the WSGI implementation wsgiref follows PEP 333  ), but the majority of the modules are not. They are specified by their code, internal documentation, and test suite (if supplied). However, because most of the standard library is cross-platform Python code, there are only a few modules that must be altered or completely rewritten by alternative implementations. 
 The standard library is not essential to run Python or embed Python within an application. Blender 2.49 for instance omits most of the standard library. 
 As of January 2014, the Python Package Index , the official repository of third-party software for Python, contains more than 38,000 packages covering a wide range of functionality, including: 
 
 graphical user interface, web framework, multimedia, databases, networking and communications 
 test frameworks, documentation tools, system administration 
 scientific computing, text processing, image processing 
 
 Development environments  
 
 See also List of integrated development environments for Python 
 
 Most Python implementations (including CPython) can function as a command line interpreter , for which the user enters statements sequentially and receives the results immediately. In short, Python acts as a shell . 
 Other shells add capabilities beyond those in the basic interpreter, including IDLE and IPython . While generally following the visual style of the Python shell, they implement features like auto-completion, retention of session state, and syntax highlighting. 
 In addition to standard desktop Python IDEs (integrated development environments), there are also browser -based IDEs, Sage (intended for developing science and math-related Python programs), and a browser-based IDE and hosting environment, PythonAnywhere . 
 Implementations  
 See also: List of Python software#Python implementations 
 The main Python implementation, named CPython , is written in C meeting the C89 standard.  
 PyPy is a fast, compliant  
 Stackless Python is a significant fork of CPython that implements microthreads ; it does not use the C memory stack, thus allowing massively concurrent programs. PyPy also has a stackless version.  
 Other just-in-time compilers have been developed in the past, but are now unsupported: 
 
 Google started a project called Unladen Swallow in 2009 with the aims of increasing the speed of the Python interpreter by 5 times by using the LLVM and improving its multithreading ability to scale to thousands of cores.  
 Psyco is a specialising just in time compiler that integrates with CPython and transforms bytecode to machine code at runtime. The produced code is specialised for certain data types and is faster than standard Python code. 
 
 In 2005 Nokia released a Python interpreter for the Series 60 mobile phones called PyS60 . It includes many of the modules from the CPython implementations and some additional modules for integration with the Symbian operating system. This project has been kept up to date to run on all variants of the S60 platform and there are several third party modules available. The Nokia N900 also supports Python with GTK widget libraries, with the feature that programs can be both written and run on the device itself.  
 There are several compilers to high-level object languages , with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language: 
 
 Jython compiles into Java byte code, which can then be executed by every Java Virtual Machine implementation. This also enables the use of Java class library functions from the Python program. 
 IronPython follows a similar approach in order to run Python programs on the .NET Common Language Runtime . 
 The RPython language can be compiled to C , Java bytecode or Common Intermediate Language , and is used to build the PyPy interpreter of Python; 
 Pyjamas compiles Python to JavaScript ; 
 Shed Skin compiles Python to C++ ; 
 Cython and Pyrex compile to C . 
 
 Development  
 Python's development is conducted largely through the Python Enhancement Proposal (PEP) process. The PEP process is the primary mechanism for proposing major new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Python.  
 Enhancement of the language goes along with development of the CPython reference implementation. The mailing list python-dev is the primary forum for discussion about the language's development; specific issues are discussed in the Roundup bug tracker maintained at python.org.  
 CPython's public releases come in three types, distinguished by which part of the version number is incremented: 
 
 Backwards-incompatible versions, where code is expected to break and must be manually ported . The first part of the version number is incremented. These releases happen infrequently—for example, version 3.0 was released 8 years after 2.0. 
 Major or "feature" releases, which are largely compatible but introduce new features. The second part of the version number is incremented. These releases are scheduled to occur roughly every 18 months, and each major version is supported by bugfixes for several years after its release.  
 Bugfix releases, which introduce no new features but fix bugs. The third and final part of the version number is incremented. These releases are made whenever a sufficient number of bugs have been fixed upstream since the last release, or roughly every 3 months. Security vulnerabilities are also patched in bugfix releases.  
 
 A number of alpha, beta, and release-candidates are also released as previews and for testing before the final release is made. Although there is a rough schedule for each release, this is often pushed back if the code is not ready. The development team monitor the state of the code by running the large unit test suite during development, and using the BuildBot continuous integration system.  
 The community of Python developers has also contributed over 38,000 software modules (as of January 2014) to the Python Package Index (called pypi), the official repository of third-party libraries for Python. 
 The major academic conference on Python is named PyCon . There are special mentoring programmes like the Pyladies . 
 Naming  
 Python's name is derived from the television series Monty Python's Flying Circus ,  
 The prefix Py- is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include Pygame , a binding of SDL to Python (commonly used to create games); PyS60 , an implementation for the Symbian S60 operating system; PyQt and PyGTK , which bind Qt and GTK , respectively, to Python; and PyPy , a Python implementation written in Python. 
 Use  
 Main article: List of Python software 
 Since 2008, Python has consistently ranked in the top eight most popular programming languages as measured by the TIOBE Programming Community Index .  It is the third most popular language whose grammatical syntax is not predominantly based on C , e.g. C++, C#, Objective-C, Java. Python does borrow heavily, however, from the expression and statement syntax of C, making it easier for programmers to transition between languages. 
 An empirical study found that, for a programming problem involving string manipulation and search in a dictionary, scripting languages such as Python were more productive than conventional languages such as C and Java. Memory consumption was often "better than Java and not much worse than C or C++".  
 Python is used as a scripting language for web applications , e.g., via mod_wsgi for the Apache web server .  With Web Server Gateway Interface , a standard API has been developed to facilitate these applications. Web application frameworks like Django , Pylons , Pyramid , TurboGears , web2py , Tornado , Flask and Zope support developers in the design and maintenance of complex applications. Pyjamas and IronPython can be used to develop the client-side of Ajax-based applications. SQLAlchemy can be used as data mapper to a relational database. Twisted is a framework to program communications between computers, and is used for example by Dropbox . 
 Libraries like NumPy , SciPy and Matplotlib allow Python to be used effectively in scientific computing, with specialized libraries such as BioPython and Astropy providing domain-specific functionality. Sage is a mathematical software with a "notebook" programmable in Python: its library covers many aspects of mathematics , including algebra , combinatorics , numerical mathematics , number theory , and calculus . 
 Python has been successfully embedded in a number of software products as a scripting language, including in finite element method software such as Abaqus , 3D animation packages such as 3ds Max , Blender , Cinema 4D , Lightwave , Houdini , Maya , modo , MotionBuilder , Softimage , the visual effects compositor Nuke , and 2D imaging programs like GIMP ,  
 Python has also been used in artificial intelligence tasks.  
 For many operating systems, Python is a standard component; it ships with most Linux distributions , AmigaOS 4 , FreeBSD , NetBSD , OpenBSD and OS X , and can be used from the terminal. A number of Linux distributions use installers written in Python: Ubuntu uses the Ubiquity installer, while Red Hat Linux and Fedora use the Anaconda installer. Gentoo Linux uses Python in its package management system , Portage . Pardus uses it for administration and during system boot.  
 Python has also seen extensive use in the information security industry, including exploit development.  
 Most of the Sugar software for the One Laptop per Child XO, now developed at Sugar Labs , is written in Python.  
 The Raspberry Pi single-board computer project has adopted Python as its principal user programming language. 
 LibreOffice included Python and intends to replace Java with Python. Python Scripting Provider is a core feature  since Version 4.0 from 7 February 2013. 
 Impact  
 Python's design and philosophy have influenced several programming languages, including: 
 
 Boo uses indentation, a similar syntax, and a similar object model. However, Boo uses static typing and is closely integrated with the .NET Framework .  
 Cobra uses indentation and a similar syntax. Cobra's "Acknowledgements" document lists Python first among languages that influenced it.  
 ECMAScript borrowed iterators , generators , and list comprehensions from Python.  
 Go is described as incorporating the "development speed of working in a dynamic language like Python".  
 Groovy was motivated by the desire to bring the Python design philosophy to Java .  
 OCaml has an optional syntax, called twt (The Whitespace Thing), inspired by Python and Haskell .  
 Ruby 's creator, Yukihiro Matsumoto , has said: "I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language."  
 
 Python's development practices have also been emulated by other languages. The practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python's case, a PEP) is also used in Tcl  because of Python's influence. 
 Python has been awarded a TIOBE Programming Language of the Year award twice (in 2007 and 2010), which is given to the language with the greatest growth in popularity over the course of a year, as measured by the TIOBE index .  
 See also  
 
 
 
  
 Free software portal 
 
 
  
 Python programming portal 
 
 
 
 
 Comparison of integrated development environments for Python 
 Comparison of programming languages 
 List of programming languages 
 LAMP (software bundle) 
 LEAP (software bundle) 
 Python for S60 
 
 References  
 
 
 ^  "Python 3.3.5 release" . Python Software Foundation . Retrieved 7 March 2014 . &#160; 
 ^  "Python 2.7.6 Release" . Python Software Foundation . Retrieved 7 March 2014 . &#160; 
 ^  "Python 3.3.5 Release Candidate 1" . Python Software Foundation . Retrieved 24 February 2014 . &#160; 
 ^  "Python 3.4.0 Release Candidate 2" . Python Software Foundation . Retrieved 24 February 2014 . &#160; 
 ^  a   b   "Why was Python created in the first place?" . General Python FAQ . Python Software Foundation . Retrieved 22 March 2007 . &#160; 
 ^  Kuchling, Andrew M. (22 December 2006). "Interview with Guido van Rossum (July 1998)" . amk.ca . Retrieved 12 March 2012 . &#160; 
 ^  van Rossum, Guido (1993). "An Introduction to Python for UNIX/C Programmers" . Proceedings of the NLUUG najaarsconferentie (Dutch UNIX users group) . "even though the design of C is far from ideal, its influence on Python is considerable." &#160; 
 ^  a   b   "Classes" . The Python Tutorial . Python Software Foundation . Retrieved 20 February 2012 . "It is a mixture of the class mechanisms found in C++ and Modula-3" &#160; 
 ^  Simionato, Michele. "The Python 2.3 Method Resolution Order" . Python Software Foundation. "The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers" &#160; 
 ^  Kuchling, A. M. "Functional Programming HOWTO" . Python v2.7.2 documentation . Python Software Foundation . Retrieved 9 February 2012 . &#160; 
 ^  Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (18 May 2001). "PEP 255&#160;– Simple Generators" . Python Enhancement Proposals . Python Software Foundation . Retrieved 9 February 2012 . &#160; 
 ^  Smith, Kevin D.; Jewett, Jim J.; Montanaro, Skip; Baxter, Anthony (2 September 2004). "PEP 318&#160;– Decorators for Functions and Methods" . Python Enhancement Proposals . Python Software Foundation . Retrieved 24 February 2012 . &#160; 
 ^  "More Control Flow Tools" . Python 3 documentation . Python Software Foundation . Retrieved 5 August 2012 . &#160; 
 ^  Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform . Berkeley: APress. p.&#160;3. ISBN &#160; 978-1-59059-881-8 . &#160; 
 ^  a   b  TIOBE Software Index (2012). "TIOBE Programming Community Index Python" . Retrieved 15 October 2012 . &#160; 
 ^  "Programming Language Trends - O'Reilly Radar" . Radar.oreilly.com. 2 August 2006 . Retrieved 17 July 2013 . &#160; 
 ^  "The RedMonk Programming Language Rankings: January 2013 – tecosystems" . Redmonk.com. 28 February 2013 . Retrieved 17 July 2013 . &#160; 
 ^  Summerfield, Mark. Rapid GUI Programming with Python and Qt . "Python is a very expressive language, which means that we can usually write far fewer lines of Python code than would be required for an equivalent application written in, say, C++ or Java" &#160; 
 ^  "Code Complete, p. 100" . &#160; 
 ^  Kuhlman, Dave. "A Python Book: Beginning Python, Advanced Python, and Python Exercises" . &#160; 
 ^  a   b   "About Python" . Python Software Foundation . Retrieved 24 April 2012 . &#160; , second section "Fans of Python use the phrase "batteries included" to describe the standard library, which covers everything from asynchronous processing to zip files." 
 ^  "PyInstaller Home Page" . Retrieved 27 January 2014 . &#160; 
 ^  a   b  Venners, Bill (13 January 2003). "The Making of Python" . Artima Developer . Artima . Retrieved 22 March 2007 . &#160; 
 ^  van Rossum, Guido (20 January 2009). "A Brief Timeline of Python" . The History of Python . Google . Retrieved 20 January 2009 . &#160; 
 ^  van Rossum, Guido (29 August 2000). "SETL (was: Lukewarm about range literals)" . Python-Dev mailing list . http://mail.python.org/pipermail/python-dev/2000-August/008881.html . Retrieved 13 March 2011 . 
 ^  Kuchling, A. M.; Zadka, Moshe (16 October 2000). "What's New in Python 2.0" . Python Software Foundation . Retrieved 11 February 2012 . &#160; 
 ^  "Python 3.0 Release" . Python Software Foundation . Retrieved 8 July 2009 . &#160; 
 ^  van Rossum, Guido (5 April 2006). "PEP 3000&#160;– Python 3000" . Python Enhancement Proposals . Python Software Foundation . Retrieved 27 June 2009 . &#160; 
 ^  The Cain Gang Ltd. "Python Metaclasses: Who? Why? When?" (PDF). Archived from the original on 10 December 2009 . Retrieved 27 June 2009 . &#160; 
 ^  "3.3. Special method names" . The Python Language Reference . Python Software Foundation . Retrieved 27 June 2009 . &#160; 
 ^  "PyDBC: method preconditions, method postconditions and class invariants for Python" . Retrieved 24 September 2011 . &#160; 
 ^  "Contracts for Python" . Retrieved 24 September 2011 . &#160; 
 ^  "PyDatalog" . Retrieved 22 July 2012 . &#160; 
 ^  a   b  Hettinger, Raymond (30 January 2002). "PEP 289&#160;– Generator Expressions" . Python Enhancement Proposals . Python Software Foundation . Retrieved 19 February 2012 . &#160; 
 ^  "6.5 itertools&#160;– Functions creating iterators for efficient looping" . Docs.python.org . Retrieved 24 November 2008 . &#160; 
 ^  a   b  Peters, Tim (19 August 2004). "PEP 20&#160;– The Zen of Python" . Python Enhancement Proposals . Python Software Foundation . Retrieved 24 November 2008 . &#160; 
 ^  Alex Martelli, Python Cookbook (2nd ed., p. 230) 
 ^  "Python Culture" . &#160; 
 ^  "General Python FAQ - Why is it called Python?" . &#160; 
 ^  "15 Ways Python Is a Powerful Force on the Web" . &#160; 
 ^  "pprint - Data pretty printer - Python Documentation" . &#160; 
 ^  Goodger, David. "Code Like a Pythonista: Idiomatic Python" . &#160; 
 ^  "How to think like a Pythonista" . &#160; 
 ^  "Is Python a good language for beginning programmers?" . General Python FAQ . Python Software Foundation . Retrieved 21 March 2007 . &#160; 
 ^  "Myths about indentation in Python" . Secnetix.de . Retrieved 19 April 2011 . &#160; 
 ^  "programming languages - Do Python programmers find the whitespace issue inconvenient?" . Programmers Stack Exchange . Retrieved 29 August 2013 . &#160; 
 ^  "White Space Discussion" . Retrieved 1 January 2013 . &#160; 
 ^  Sweigart, Al (2010). "Appendix A: Differences Between Python 2 and 3" . Invent Your Own Computer Games with Python (2 ed.). ISBN &#160; 978-0-9821060-1-3 . Retrieved 20 February 2014 . &#160; 
 ^  van Rossum, Guido (22 April 2009). "Tail Recursion Elimination" . Neopythonic.blogspot.be . Retrieved 3 December 2012 . &#160; 
 ^  van Rossum, Guido (9 February 2006). "Language Design Is Not Just Solving Puzzles" . Artima forums . Artima . Retrieved 21 March 2007 . &#160; 
 ^  van Rossum, Guido; Eby, Phillip J. (10 May 2005). "PEP 342&#160;– Coroutines via Enhanced Generators" . Python Enhancement Proposals . Python Software Foundation . Retrieved 19 February 2012 . &#160; 
 ^  "PEP 380" . Python.org . Retrieved 3 December 2012 . &#160; 
 ^  van Rossum, Guido; Hettinger, Raymond (7 February 2003). "PEP 308&#160;– Conditional Expressions" . Python Enhancement Proposals . Python Software Foundation . Retrieved 13 July 2011 . &#160; 
 ^  "Why must 'self' be used explicitly in method definitions and calls?" . Design and History FAQ . Python Software Foundation . Retrieved 19 February 2012 . &#160; 
 ^  "The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1" . Retrieved 12 January 2011 . &#160; 
 ^  Zadka, Moshe; van Rossum, Guido (11 March 2001). "PEP 237&#160;– Unifying Long Integers and Integers" . Python Enhancement Proposals . Python Software Foundation . Retrieved 24 September 2011 . &#160; 
 ^  Zadka, Moshe; van Rossum, Guido (11 March 2001). "PEP 238&#160;– Changing the Division Operator" . Python Enhancement Proposals . Python Software Foundation . Retrieved 23 October 2013 . &#160; 
 ^  "Why Python's Integer Division Floors" . Retrieved 25 August 2010 . &#160; 
 ^  "round" , The Python standard library, release 2.7, §2: Built-in functions , retrieved 14 August 2011 &#160; 
 ^  "round" , The Python standard library, release 3.2, §2: Built-in functions , retrieved 14 August 2011 &#160; 
 ^  Python Essential Reference, David M Beazley 
 ^  Piotrowski, Przemyslaw (July 2006). "Build a Rapid Web Development Environment for Python Server Pages and Oracle" . Oracle Technology Network . Oracle . Retrieved 12 March 2012 . &#160; 
 ^  Batista, Facundo (17 October 2003). "PEP 327&#160;– Decimal Data Type" . Python Enhancement Proposals . Python Software Foundation . Retrieved 24 November 2008 . &#160; 
 ^  Eby, Phillip J. (7 December 2003). "PEP 333&#160;– Python Web Server Gateway Interface v1.0" . Python Enhancement Proposals . Python Software Foundation . Retrieved 19 February 2012 . &#160; 
 ^  van Rossum, Guido (5 June 2001). "PEP 7&#160;– Style Guide for C Code" . Python Enhancement Proposals . Python Software Foundation . Retrieved 24 November 2008 . &#160; 
 ^  "CPython byte code" . Docs.python.org . Retrieved 19 April 2011 . &#160; 
 ^  "Python 2.5 internals" (PDF) . Retrieved 19 April 2011 . &#160; 
 ^  "An Interview with Guido van Rossum" . Oreilly.com . Retrieved 24 November 2008 . &#160; 
 ^  "PyPy compatibility" . Pypy.org . Retrieved 3 December 2012 . &#160; 
 ^  "speed comparison between CPython and Pypy" . Speed.pypy.org . Retrieved 3 December 2012 . &#160; 
 ^  "STM with threads" . Morepypy.blogspot.be. 10 June 2012 . Retrieved 3 December 2012 . &#160; 
 ^  "Application-level Stackless features — PyPy 2.0.2 documentation" . Doc.pypy.org . Retrieved 17 July 2013 . &#160; 
 ^  "Plans for optimizing Python" . Google Project Hosting . Google. 15 December 2009 . Retrieved 24 September 2011 . &#160; 
 ^  a   b  Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 June 2000). "PEP 1&#160;– PEP Purpose and Guidelines" . Python Enhancement Proposals . Python Software Foundation . Retrieved 19 April 2011 . &#160; 
 ^  Cannon, Brett. "Guido, Some Guys, and a Mailing List: How Python is Developed" . python.org . Python Software Foundation . Retrieved 27 June 2009 . &#160; 
 ^  "Python Developer's Guide" . &#160; 
 ^  Norwitz, Neal (8 April 2002). " Release Schedules (was Stability &amp; change)" . Retrieved 27 June 2009 . &#160; 
 ^  Aahz; Baxter, Anthony (15 March 2001). "PEP 6&#160;– Bug Fix Releases" . Python Enhancement Proposals . Python Software Foundation . Retrieved 27 June 2009 . &#160; 
 ^  "Python Buildbot" . Python Developer’s Guide . Python Software Foundation . Retrieved 24 September 2011 . &#160; 
 ^  "General Python FAQ" . Python v2.7.3 documentation . Docs.python.org . Retrieved 3 December 2012 . &#160; 
 ^  a   b   "Whetting Your Appetite" . The Python Tutorial . Python Software Foundation . Retrieved 20 February 2012 . &#160; 
 ^  "In Python, should I use else after a return in an if block?" . Stack Overflow . Stack Exchange. 17 February 2011 . Retrieved 6 May 2011 . &#160; 
 ^  Prechelt, Lutz (14 March 2000). "An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl" . Bibliography of Lutz Prechelt . Retrieved 30 August 2013 . &#160; 
 ^  "Quotes about Python" . Python Software Foundation . Retrieved 8 January 2012 . &#160; 
 ^  "Organizations Using Python" . Python Software Foundation . Retrieved 15 January 2009 . &#160; 
 ^  "Python&#160;: the holy grail of programming" . CERN Bulletin (CERN Publications) (31/2006). 31 July 2006 . Retrieved 11 February 2012 . &#160; 
 ^  Shafer, Daniel G. (17 January 2003). "Python Streamlines Space Shuttle Mission Design" . Python Software Foundation . Retrieved 24 November 2008 . &#160; 
 ^  Fortenberry, Tim (17 January 2003). "Industrial Light &amp; Magic Runs on Python" . Python Software Foundation . Retrieved 11 February 2012 . &#160; 
 ^  Taft, Darryl K. (5 March 2007). "Python Slithers into Systems" . eWeek.com . Ziff Davis Holdings . Retrieved 24 September 2011 . &#160; 
 ^  "Usage statistics and market share of Python for websites" . 2012 . Retrieved 18 December 2012 . &#160; 
 ^  "Installers for GIMP for Windows - Frequently Asked Questions" . 26 July 2013 . Retrieved 26 July 2013 . &#160; 
 ^  "jasc psp9components" . &#160;  
 ^  "About getting started with writing geoprocessing scripts" . ArcGIS Desktop Help 9.2 . Environmental Systems Research Institute. 17 November 2006 . Retrieved 11 February 2012 . &#160; 
 ^  CCP porkbelly (24 August 2010). "Stackless Python 2.7" . EVE Community Dev Blogs . CCP Games . "As you may know, EVE has at its core the programming language known as Stackless Python." &#160; 
 ^  Caudill, Barry (20 September 2005). "Modding Sid Meier's Civilization IV" . Sid Meier's Civilization IV Developer Blog . Firaxis Games . Archived from the original on 10 August 2010. "we created three levels of tools ... The next level offers Python and XML support, letting modders with more experience manipulate the game world and everything in it." &#160; 
 ^  "Python Language Guide (v1.0)" . Google Documents List Data API v1.0 . Google. Archived from the original on 10 August 2010. &#160; 
 ^  "Python for Artificial Intelligence" . Wiki.python.org. 19 July 2012 . Retrieved 3 December 2012 . &#160;  
 ^  Paine, Jocelyn, ed. (August 2005). "AI in Python" . AI Expert Newsletter (Amzi!) . Retrieved 11 February 2012 . &#160; 
 ^  "PyAIML 0.8.5&#160;: Python Package Index" . Pypi.python.org . Retrieved 17 July 2013 . &#160; 
 ^  Russell, Stuart J. &amp; Norvig, Peter (2009). Artificial Intelligence: A Modern Approach (3rd ed.). Upper Saddle River, NJ: Prentice Hall. p.&#160;1062. ISBN &#160; 978-0-13-604259-4 . Retrieved 11 February 2012 . &#160; 
 ^  "Natural Language Toolkit" . &#160; 
 ^  "Pardus: TÜBİTAK/UEKAE" . pardus.org.tr . Retrieved 24 November 2008 . &#160;  
 ^  "Immunity: Knowing You're Secure" . &#160; 
 ^  "Corelabs site" . &#160; 
 ^  "What is Sugar?" . Sugar Labs . Retrieved 11 February 2012 . &#160; 
 ^  "4.0 New Features and Fixes" . LibreOffice.org . The Document Foundation . 2013 . Retrieved 2013-02-25 . &#160; 
 ^  "Gotchas for Python Users" . boo.codehaus.org . Codehaus Foundation . Retrieved 24 November 2008 . &#160; 
 ^  Esterbrook, Charles. "Acknowledgements" . cobra-language.com . Cobra Language . Retrieved 7 April 2010 . &#160; 
 ^  Esterbrook, Charles. "Comparison to Python" . cobra-language.com . Cobra Language . Retrieved 7 April 2010 . &#160; 
 ^  "Proposals: iterators and generators " . wiki.ecmascript.org . Retrieved 24 November 2008 . &#160; 
 ^  Kincaid, Jason (10 November 2009). "Google’s Go: A New Programming Language That’s Python Meets C++" . TechCrunch . Retrieved 29 January 2010 . &#160; 
 ^  Strachan, James (29 August 2003). "Groovy&#160;– the birth of a new dynamic language for the Java platform" . &#160; 
 ^  Lin, Mike. " " The Whitespace Thing" for OCaml" . Massachusetts Institute of Technology . Retrieved 12 April 2009 . &#160; 
 ^  "An Interview with the Creator of Ruby" . Linuxdevcenter.com . Retrieved 3 December 2012 . &#160; 
 ^  Kupries, Andreas; Fellows, Donal K. (14 September 2000). "TIP #3: TIP Format" . tcl.tk . Tcl Developer Xchange . Retrieved 24 November 2008 . &#160; 
 ^  Gustafsson, Per; Niskanen, Raimo (29 January 2007). "EEP 1: EEP Purpose and Guidelines" . erlang.org . Retrieved 19 April 2011 . &#160; 
 ^  "TIOBE Programming Community Index for March 2012" . TIOBE Software. March 2012 . Retrieved 25 March 2012 . &#160; 
 
 
 Further reading  
 
 Downey, Allen B (Version 1.6.6 - May 2012). Think Python: How to Think Like a Computer Scientist . ISBN &#160; 978-0-521-72596-5 . &#160; Check date values in: |date= ( help ) 
 Hamilton, Naomi (5 August 2008). "The A-Z of Programming Languages: Python" . Computerworld . Retrieved 31 March 2010 . &#160; 
 Lutz, Mark (2013). Learning Python (5th ed.). O'Reilly Media. ISBN &#160; 978-0-596-15806-4 . &#160; 
 Pilgrim, Mark (2004). Dive Into Python . Apress. ISBN &#160; 978-1-59059-356-1 . &#160; 
 Pilgrim, Mark (2009). Dive Into Python 3 . Apress. ISBN &#160; 978-1-4302-2415-0 . &#160; 
 Summerfield, Mark (2009). Programming in Python 3 (2nd ed.). Addison-Wesley Professional. ISBN &#160; 978-0-321-68056-3 . &#160; 
 
 External links  
 
 
 Find more about Python (programming language) at Wikipedia's sister projects 
 
 
  
 Media from Commons 
 
 
  
 Quotations from Wikiquote 
 
 
  
 Textbooks from Wikibooks 
 
 
  
 Learning resources from Wikiversity 
 
 
 
 Official website 
 Python (programming language) newsgroup on Usenet ( alternative free web access using Google Groups ) 
 Python development list 
 Python on the Open Directory Project 
 
 
 
 
 
 
 
 
 
 v 
 t 
 e 
 
 
 Programming languages 
 
 
 
 
 
 
 
 
 
 Timeline 
 
 
 
 
 
 
 
 
 
 
 
 Assembly 
 BASIC 
 C 
 C++ 
 C# 
 COBOL 
 Fortran 
 Java 
 JavaScript (JS) 
 Lisp 
 Pascal 
 Perl 
 PHP 
 Python 
 Ruby 
 Smalltalk 
 Visual Basic .NET (VB.NET) 
 more... 
 
 
 
 
 
 
 
 
 
 
 
  Category 
  Comparison 
 Lists 
 
 Alphabetical 
 Categorical 
 Generational 
 Non-English-based 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 v 
 t 
 e 
 
 
 Python 
 
 
 
 
 
 
 Implementations 
 
 
 
 CLPython 
 CPython 
 Jython 
 IronPython 
 PyPy 
 Python for S60 
 Psyco 
 Stackless Python 
 Unladen Swallow 
 
 
 
 
 
 
 
 
 IDE 
 
 
 
 Boa 
 Eclipse 
 Eric Python IDE 
 IDLE 
 SPE 
 Ninja-IDE 
 more ... 
 
 
 
 
 
 
 
 
 Topics 
 
 
 
 WSGI 
 
 
 
 
 
 
 
 
 
 
 
 software (list) 
 Python Software Foundation 
 PyCon 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 v 
 t 
 e 
 
 
 Python web application frameworks 
 
 
 
 
 
 
 
 
 
 BlueBream 
 CherryPy 
 Django 
 Flask 
 Grok 
 Nagare 
 Nevow 
 Pyjamas 
 Pylons 
 Pyramid 
 Quixote 
 Spyce 
 TACTIC 
 Tornado 
 TurboGears 
 TwistedWeb 
 Webware 
 web2py 
 Zope 2 
 more ... 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 v 
 t 
 e 
 
 
 Free and open-source software 
 
 
 
 
 
 
 General 
 
 
 
 Alternative terms for free software 
 Comparison of open source and closed source 
 Comparison of open-source software hosting facilities 
 Formerly proprietary software 
 Free and open-source Android applications 
 Free and open-source software packages 
 Free software 
 Free software events 
 Free software movement 
 Free software project directories 
 Free software web applications 
 Gratis versus libre 
 Long-term support 
 Open-source software 
 Outline 
 SPDX 
 
 
 
 
 
 
 
 
 Operating system 
families 
 
 
 
 AROS 
 BSD 
 Darwin 
 eCos 
 FreeDOS 
 GNU 
 Haiku 
 Inferno 
 Linux 
 Mach 
 MINIX 
 OpenSolaris 
 Plan 9 
 ReactOS 
 
 
 
 
 
 
 
 
 Development 
 
 
 
 Basic For Qt 
 Eclipse 
 Free Pascal 
 FreeBASIC 
 Gambas 
 GCC 
 Java 
 LLVM 
 Lua 
 NetBeans 
 Open64 
 Perl 
 PHP 
 Python 
 ROSE 
 Ruby 
 Tcl 
 
 
 
 
 
 
 
 
 History 
 
 
 
 GNU 
 Haiku 
 Linux 
 Mozilla 
 
 Application Suite 
 Firefox 
 Thunderbird 
 
 
 
 
 
 
 
 
 
 
 Organizations 
 
 
 
 Android Open Source Project 
 Apache Software Foundation 
 Blender Foundation 
 The Document Foundation 
 Eclipse Foundation 
 Free Software Foundation 
 
 Europe 
 India 
 Latin America 
 
 
 FreeBSD Foundation 
 freedesktop.org 
 FSMI 
 GNOME Foundation 
 GNU Project 
 Google Code 
 KDE e.V. 
 Linux Foundation 
 Mozilla Foundation 
 Open Knowledge Foundation 
 Open Source Geospatial Foundation 
 Open Source Initiative 
 Software Freedom Conservancy 
 SourceForge 
 Symbian Foundation 
 Ubuntu Foundation 
 X.Org Foundation 
 Xiph.Org Foundation 
 XMPP Standards Foundation 
 
 
 
 
 
 
 
 
 Licenses 
 
 
 
 Apache 
 Artistic 
 Beerware 
 Boost 
 BSD 
 CC0 
 GNU GPL 
 GNU LGPL 
 ISC 
 MIT 
 MPL 
 Ms-PL/RL 
 WTFPL 
 zlib 
 
 
 
 
 
 
 
 
 License types 
and standards 
 
 
 
 Comparison of free and open-source software licenses 
 Contributor License Agreement 
 Copyfree 
 Copyleft 
 Debian Free Software Guidelines 
 Definition of Free Cultural Works 
 Free license 
 The Free Software Definition 
 The Open Source Definition 
 Open-source license 
 Permissive free software licence 
 Public domain 
 Viral license 
 
 
 
 
 
 
 
 
 Challenges 
 
 
 
 Binary blob 
 Digital rights management 
 Free and open-source graphics device driver 
 Hardware restrictions 
 License proliferation 
 Mozilla software rebranding 
 Proprietary software 
 SCO–Linux controversies 
 Secure boot 
 Software patents 
 Software security 
 Trusted Computing 
 
 
 
 
 
 
 
 
 Related topics 
 
 
 
 The Cathedral and the Bazaar 
 Forking 
 Linux distribution 
 Microsoft Open Specification Promise 
 Revolution OS 
 
 
 
 
 
 
 
 
 
 
 
 Book 
 Category 
 Commons 
 Portal 
 
 
 
 
 
 
 
 
  
  



 								 
				Retrieved from " http://en.wikipedia.org/w/index.php?title=Python_(programming_language)&amp;oldid=598925113 "				 
												 Categories : Python (programming language) Class-based programming languages Cross-platform free software Dynamically typed programming languages High-level programming languages Object-oriented programming languages Programming languages created in 1991 Scripting languages Text-oriented programming languages Dutch inventions  Hidden categories: All articles with dead external links Articles with dead external links from July 2013 Articles with dead external links from January 2013 Articles with dead external links from February 2012 All articles with unsourced statements Articles with unsourced statements from January 2014 Wikipedia articles needing page number citations from January 2012 Articles containing potentially dated statements from February 2012 All articles containing potentially dated statements Articles with unsourced statements from February 2012 Articles with unsourced statements from March 2013 CS1 errors: dates Articles with Open Directory Project links Good articles Use dmy dates from October 2012  												 
							 
		 
		 
			 Navigation menu 
			 
				 
	 Personal tools 
	 
 Create account Log in 	 
 
				 
					 
	 Namespaces 
	 
					 Article 
					 Talk 
			 
 
 
	 
		 
	 Variants 
	 
		 
					 
	 
 
				 
				 
					 
	 Views 
	 
					 Read 
					 Edit 
					 View history 
			 
 
 
	 Actions 
	 
		 
					 
	 
 
 
	 Search 
	 
					 
					 		 
	 
 
				 
			 
			 
					 
				 
	 Navigation 
	 
		 
			 Main page 
			 Contents 
			 Featured content 
			 Current events 
			 Random article 
			 Donate to Wikipedia 
			 Wikimedia Shop 
		 
	 
 
 
	 Interaction 
	 
		 
			 Help 
			 About Wikipedia 
			 Community portal 
			 Recent changes 
			 Contact page 
		 
	 
 
 
	 Tools 
	 
		 
			 What links here 
			 Related changes 
			 Upload file 
			 Special pages 
			 Permanent link 
			 Page information 
			 Data item 
 Cite this page 		 
	 
 
 
	 Print/export 
	 
		 
			 Create a book 
			 Download as PDF 
			 Printable version 
		 
	 
 
 
	 Languages 
	 
		 
			 Afrikaans 
			 Alemannisch 
			 العربية 
			 Aragonés 
			 Azərbaycanca 
			 বাংলা 
			 Беларуская 
			 Български 
			 Bosanski 
			 Català 
			 Čeština 
			 Dansk 
			 Deutsch 
			 Eesti 
			 Ελληνικά 
			 Español 
			 Esperanto 
			 Euskara 
			 فارسی 
			 Français 
			 Galego 
			 ગુજરાતી 
			 한국어 
			 Հայերեն 
			 हिन्दी 
			 Hrvatski 
			 Bahasa Indonesia 
			 Interlingua 
			 Íslenska 
			 Italiano 
			 עברית 
			 ქართული 
			 Қазақша 
			 Latina 
			 Latviešu 
			 Lietuvių 
			 Lojban 
			 Magyar 
			 Македонски 
			 മലയാളം 
			 मराठी 
			 Bahasa Melayu 
			 Монгол 
			 မြန်မာဘာသာ 
			 Nederlands 
			 नेपाली 
			 日本語 
			 Norsk bokmål 
			 ଓଡ଼ିଆ 
			 ភាសាខ្មែរ 
			 Plattdüütsch 
			 Polski 
			 Português 
			 Română 
			 Русский 
			 Shqip 
			 සිංහල 
			 Simple English 
			 Slovenčina 
			 Slovenščina 
			 Српски / srpski 
			 Srpskohrvatski / српскохрватски 
			 Suomi 
			 Svenska 
			 Tagalog 
			 தமிழ் 
			 తెలుగు 
			 ไทย 
			 Тоҷикӣ 
			 Türkçe 
			 ᨅᨔ ᨕᨘᨁᨗ 
			 Українська 
			 Tiếng Việt 
			 中文 
			 
			 Edit links 
		 
	 
 
			 
		 
		 
							 
											 This page was last modified on 10 March 2014 at 02:14. 
											 Text is available under the Creative Commons Attribution-ShareAlike License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. 
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc. , a non-profit organization. 
									 
							 
											 Privacy policy 
											 About Wikipedia 
											 Disclaimers 
											 Contact Wikipedia 
											 Developers 
											 Mobile view